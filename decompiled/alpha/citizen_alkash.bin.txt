GlobalVarCount = 2
	G_VAR_0 OBJECT 
	G_VAR_1 BOOL 

Strings:
	all
	idle
	fdie
	GetPosition
	bdie
	GetScriptProperty
	Owner
	HasScriptProperty
	GetScriptProperty
	@GetEyesHeight
	GetEyesHeight
	head
	attack_begin
	attack
	@GetAttackDistance
	GetAttackDistance
	GetPFPosition
	attack_on
	attack_stay
	fjump
	attack_off
	attack_middle
	attack_end
	bjump
	IsAttacking
	IsAttacking
	walk
	run
	SetNPCName
	SetPhoto
	SetPlayerName
	IsDialogEnd
	GetReturnValue
	Neutral
	SetMessage
	ClearReplies
	AddReply
	fire
	phys
	HasProperty
	HasProperty
	health
	armor
	GetProperty
	armor_
	SetProperty
	IsDead
	IsDead
	GetScene
	noaccess
	scripted
	blood.xml
	fhit
	bhit
	hit_react
	1
	2
	playing 
	start: 
	end: 
	killme
	SetReturnValue
	KnowTvirin
	player
	GenerateMoney: iMin > iMax
	Money
	bandage
	tourniquet
	ui/NPC_None.png
	class
	rat
	dog

Import:
	DoTrade (0 args)
	WaitForAnimEnd (0 args)
	PlayAnimation (2 args)
	StopAnimation (0 args)
	StopTrade (0 args)
	Hold (0 args)
	GetPosition (1 args)
	GetDirection (1 args)
	RemoveRTEnvelope (0 args)
	SetDeathState (0 args)
	Stop (0 args)
	StopAsync (0 args)
	LookAsync (3 args)
	UnlookAsync (1 args)
	LockAnimationEnd (2 args)
	RemoveEnvelope (0 args)
	StopSecondaryAnimation (0 args)
	SensePlayerOnly (1 args)
	KillTimer (1 args)
	ResetAAS (0 args)
	IsPlayerActor (2 args)
	SetTimer (2 args)
	rand (2 args)
	Sleep (1 args)
	GetCameraFarDistance (1 args)
	GetRandomPFPointInCircle (4 args)
	FindShiftedPathTo (2 args)
	RotatePath (2 args)
	FollowPath (3 args)
	RequestClearPath (1 args)
	StopGroup0 (0 args)
	irand (2 args)
	WaitForAnimEnd (1 args)
	Sleep (2 args)
	HasAnimation (3 args)
	IsExisting3DSound (2 args)
	GetPFPosition (1 args)
	rand (1 args)
	Face (1 args)
	SetSpeed (1 args)
	GetVictim (2 args)
	ReportAttack (1 args)
	ReportHit (4 args)
	SetAttackState (1 args)
	IsAnimationPlaying (1 args)
	sync (0 args)
	Speak (1 args)
	FindPathTo (2 args)
	FollowPath (5 args)
	CreateDialog (1 args)
	IsOverrideActive (1 args)
	DoDialog (1 args)
	StopDialog (1 args)
	lshWaitForAnimEnd (0 args)
	lshStopAnimation (0 args)
	GetScene (1 args)
	GetEyesHeight (1 args)
	AddActorByType (6 args)
	GetSecondaryAnimationType (1 args)
	FadeSecondaryAnimation (4 args)
	RotateAsync (2 args)
	IsLoaded (1 args)
	StopWorld (0 args)
	CameraTransit (2 args)
	Rotate (2 args)
	CameraWaitForPlayFinish (0 args)
	ResumeWorld (0 args)
	CameraSwitchToNormal (0 args)
	Trace (1 args)
	lshGetAnimTimes (3 args)
	lshPlayAnimation (2 args)
	lshStopSpeech (0 args)
	GetVariable (2 args)
	GetGameTime (1 args)
	GetProperty (2 args)
	SignalDeath (1 args)
	GetInvItemByName (2 args)
	AddItem (4 args)
	ClearSubContainer (1 args)
	WorkWithCorpse (1 args)
	CanSee (2 args)
	ReportReputationChange (3 args)
	SetRTEnvelope (2 args)

RunOp = 0xaa
RunTask = 2

GlobalTasks: 
	GTASK_0 Vars = (bool) Params = 1
		EVENT_11 Op = 0xf Vars = (int)
	GTASK_1  Params = 1
		EVENT_0 Op = 0x25 Vars = (object)
		EVENT_6 Op = 0x33 Vars = ()
		EVENT_22 Op = 0xa4 Vars = (object, int, float, float)
		EVENT_16 Op = 0xa6 Vars = (object, string)
		EVENT_41 Op = 0xa8 Vars = (object)
	GTASK_2 Vars = (bool, bool, bool) Params = 0
		EVENT_0 Op = 0xc2 Vars = (object)
		EVENT_17 Op = 0xd6 Vars = (object)
		EVENT_30 Op = 0xea Vars = (object, object)
		EVENT_40 Op = 0x104 Vars = (object)
		EVENT_42 Op = 0x118 Vars = (object, string)
		EVENT_1 Op = 0x12e Vars = (object)
		EVENT_3 Op = 0x134 Vars = (object)
		EVENT_7 Op = 0x13a Vars = (int)
		EVENT_6 Op = 0x146 Vars = ()
		EVENT_41 Op = 0x15d Vars = (object)
		EVENT_10 Op = 0x1c7 Vars = (object)
		EVENT_28 Op = 0x1cb Vars = ()
	GTASK_3  Params = 0
		EVENT_0 Op = 0x1de Vars = (object)
		EVENT_17 Op = 0x1f2 Vars = (object)
		EVENT_30 Op = 0x206 Vars = (object, object)
		EVENT_40 Op = 0x220 Vars = (object)
		EVENT_42 Op = 0x234 Vars = (object, string)
		EVENT_6 Op = 0x24a Vars = ()
	GTASK_4 Vars = (object) Params = 1
		EVENT_0 Op = 0x2d3 Vars = (object)
		EVENT_17 Op = 0x2e7 Vars = (object)
		EVENT_30 Op = 0x2fb Vars = (object, object)
		EVENT_40 Op = 0x315 Vars = (object)
		EVENT_42 Op = 0x329 Vars = (object, string)
		EVENT_41 Op = 0x34a Vars = (object)
		EVENT_7 Op = 0x353 Vars = (int)
		EVENT_6 Op = 0x376 Vars = ()
	GTASK_5 Vars = (object, int, int, bool, int) Params = 1
	GTASK_6 Vars = (bool, object) Params = 6
		EVENT_6 Op = 0x576 Vars = ()
		EVENT_7 Op = 0x5e3 Vars = (int)
		EVENT_10 Op = 0x5f5 Vars = (object)
		EVENT_41 Op = 0x600 Vars = (object)
	GTASK_7 Vars = (object) Params = 2
	GTASK_8 Vars = (object, object, string, bool) Params = 2
		EVENT_11 Op = 0x6cf Vars = (int, int)

EVENT_16 Op = 0x987 Vars = (object, string)
EVENT_41 Op = 0x994 Vars = (object)
EVENT_22 Op = 0x99a Vars = (object, int, float, float)

0x0: PushEmpty()
0x1: @ DoTrade()
0x2: Pop(0)
0x3: Stack[0 + Tasks[-1].StackPointer] = (bool)0
0x4: @ WaitForAnimEnd()
0x5: Pop(0)
0x6: Push("all")
0x7: Push("idle")
0x8: @ PlayAnimation(Stack[-2], Stack[-1])
0x9: Pop(2)
0xa: Push( Stack[0 + Tasks[-1].StackPointer] )
0xb: IF (Stack[-1] == 0) GOTO 0xd; Pop(1)

0xc: Return(0)

0xd: GOTO 0x4

0xe: Return(0)

0xf: PushEmpty()
0x10: @ StopAnimation()
0x11: Pop(0)
0x12: @ StopTrade()
0x13: Pop(0)
0x14: Stack[0 + Tasks[-1].StackPointer] = (bool)1
0x15: Return(0)

0x16: PushEmpty()
0x17: EventDisable 0
0x18: PushEmpty(object)
0x19: Stack[-1] = Stack[-2]
0x1a: Call 0x37

0x1b: Pop(1)
0x1c: PushEmpty(object)
0x1d: Stack[-1] = Stack[-2]
0x1e: Call 0xb03

0x1f: Pop(1)
0x20: EventEnable 0
0x21: @ Hold()
0x22: Pop(0)
0x23: GOTO 0x21

0x24: Return(0)

0x25: PushEmpty(int, int)
0x26: PushEmpty(int, object)
0x27: Stack[-1] = Stack[-5]
0x28: Call 0xa1d

0x29: Stack[-3] = Stack[-2]
0x2a: Pop(2)
0x2b: Push((int) 0)
0x2c: Pop(1); Push((bool) Stack[-2] > Stack[-1])
0x2d: IF (Stack[-1] == 0) GOTO 0x32; Pop(1)

0x2e: PushEmpty(object)
0x2f: Stack[-1] = Stack[-4]
0x30: Call 0xa20

0x31: Pop(1)
0x32: Return(2)

0x33: PushEmpty()
0x34: Call 0xa26

0x35: Pop(0)
0x36: Return(0)

0x37: PushEmpty(cvector, cvector, cvector, cvector, string, object, bool, bool, float, cvector, cvector, cvector, cvector, cvector, string, object, bool, bool, float, cvector)
0x38: Pop(0); Push((bool) Stack[-21] == 0)
0x39: IF (Stack[-1] == 0) GOTO 0x3f; Pop(1)

0x3a: PushEmpty(string)
0x3b: Stack[-1] = "fdie"
0x3c: Call 0x8e

0x3d: Pop(1)
0x3e: GOTO 0x8d

0x3f: @@ GetPosition(Stack[-10])
0x40: Pop(0)
0x41: @ GetPosition(Stack[-9])
0x42: Pop(0)
0x43: @ GetDirection(Stack[-8])
0x44: Pop(0)
0x45: Stack[-7] = Stack[-9] - Stack[-10] 
0x46: Push(CVariableVector(Stack[-7], 0))
0x47: Push(CVariableVector(Stack[-9], 0))
0x48: Stack[-2] *= Stack[-1]
0x49: Push(CVariableVector(Stack[-8], 512))
0x4a: Push(CVariableVector(Stack[-10], 512))
0x4b: Stack[-2] *= Stack[-1]
0x4c: Stack[-2] += Stack[-1]
0x4d: Push((int) 0)
0x4e: Pop(2); Push((bool) Stack[-2] >= Stack[-1])
0x4f: IF (Stack[-1] == 0) GOTO 0x52; Pop(1)

0x50: Stack[-6] = "fdie"
0x51: GOTO 0x53

0x52: Stack[-6] = "bdie"
0x53: @ RemoveRTEnvelope()
0x54: Pop(0)
0x55: @ SetDeathState()
0x56: Pop(0)
0x57: @ Stop()
0x58: Pop(0)
0x59: @ StopAsync()
0x5a: Pop(0)
0x5b: Stack[-5] = Stack[-21]
0x5c: Push("GetScriptProperty")
0x5d: Push((int) 2)
0x5e: FuncExist 1 = 23, 2 (TaskVar=2)
0x5f: IF (Stack[-1] == 0) GOTO 0x6b; Pop(1)

0x60: Push("Owner")
0x61: @@ HasScriptProperty(Stack[-5], Stack[-1])
0x62: Pop(1)
0x63: Push(Stack[-4])
0x64: IF (Stack[-1] == 0) GOTO 0x6b; Pop(1)

0x65: Push("Owner")
0x66: @@ GetScriptProperty(Stack[-6], Stack[-1])
0x67: Pop(1)
0x68: Pop(0); Push((bool) Stack[-5] == 0)
0x69: IF (Stack[-1] == 0) GOTO 0x6b; Pop(1)

0x6a: Stack[-5] = Stack[-21]
0x6b: Push("@GetEyesHeight")
0x6c: Push((int) 1)
0x6d: FuncExist 1 = 7, 2 (TaskVar=2)
0x6e: IF (Stack[-1] == 0) GOTO 0x7a; Pop(1)

0x6f: @@ GetEyesHeight(Stack[-2])
0x70: Pop(0)
0x71: Stack[-1] = CVector(0.0, 0.0, 0.0)
0x72: Push(CVariableVector(Stack[-1], 256))
0x73: Stack[-1] = Stack[-3]
0x74: Stack[-1] = Stack[Stack[-2] * 4 + 1]
0x75: Push("head")
0x76: @ LookAsync(Stack[-22], Stack[-1], Stack[-2])
0x77: Pop(1)
0x78: Stack[-3] = (bool) 1
0x79: GOTO 0x7b

0x7a: Stack[-3] = (bool) 0
0x7b: Push("all")
0x7c: @ PlayAnimation(Stack[-1], Stack[-7])
0x7d: Pop(1)
0x7e: @ WaitForAnimEnd()
0x7f: Pop(0)
0x80: Push(Stack[-3])
0x81: IF (Stack[-1] == 0) GOTO 0x87; Pop(1)

0x82: @ StopAsync()
0x83: Pop(0)
0x84: Push("head")
0x85: @ UnlookAsync(Stack[-1])
0x86: Pop(1)
0x87: Push("all")
0x88: @ LockAnimationEnd(Stack[-1], Stack[-7])
0x89: Pop(1)
0x8a: @ RemoveEnvelope()
0x8b: Pop(0)
0x8c: Stack[-5] = 0
0x8d: Return(20)

0x8e: PushEmpty()
0x8f: @ RemoveRTEnvelope()
0x90: Pop(0)
0x91: @ SetDeathState()
0x92: Pop(0)
0x93: @ Stop()
0x94: Pop(0)
0x95: @ StopAsync()
0x96: Pop(0)
0x97: @ StopSecondaryAnimation()
0x98: Pop(0)
0x99: Push("all")
0x9a: @ PlayAnimation(Stack[-1], Stack[-2])
0x9b: Pop(1)
0x9c: @ WaitForAnimEnd()
0x9d: Pop(0)
0x9e: Push("all")
0x9f: @ LockAnimationEnd(Stack[-1], Stack[-2])
0xa0: Pop(1)
0xa1: @ RemoveEnvelope()
0xa2: Pop(0)
0xa3: Return(0)

0xa4: PushEmpty()
0xa5: Return(0)

0xa6: PushEmpty()
0xa7: Return(0)

0xa8: PushEmpty()
0xa9: Return(0)

0xaa: Push((bool) 1)
0xab: @ SensePlayerOnly(Stack[-1])
0xac: Pop(1)
0xad: PushEmpty()
0xae: Call 0xaa3

0xaf: Pop(0)
0xb0: PushEmpty()
0xb1: Call 0xb9

0xb2: Pop(0)
0xb3: Stack[2 + Tasks[-1].StackPointer] = (bool)0
0xb4: PushEmpty()
0xb5: Call 0x18e

0xb6: Pop(0)
0xb7: GOTO 0xb3

0xb8: Return(0)

0xb9: PushEmpty(bool)
0xba: Call 0x898

0xbb: Pop(0)
0xbc: Stack[-1] = !Stack[-1]
0xbd: IF (Stack[-1] == 0) GOTO 0xc1; Pop(1)

0xbe: PushEmpty()
0xbf: Call 0xa26

0xc0: Pop(0)
0xc1: Return(0)

0xc2: PushEmpty(int, int)
0xc3: PushEmpty(int, object)
0xc4: Stack[-1] = Stack[-5]
0xc5: Call 0xa1d

0xc6: Stack[-3] = Stack[-2]
0xc7: Pop(2)
0xc8: Push((int) 0)
0xc9: Pop(1); Push((bool) Stack[-2] > Stack[-1])
0xca: IF (Stack[-1] == 0) GOTO 0xd5; Pop(1)

0xcb: Push((int) 1)
0xcc: Pop(1); Push((bool) Stack[-2] > Stack[-1])
0xcd: IF (Stack[-1] == 0) GOTO 0xd1; Pop(1)

0xce: PushEmpty()
0xcf: Call 0x14d

0xd0: Pop(0)
0xd1: PushEmpty(object)
0xd2: Stack[-1] = Stack[-4]
0xd3: Call 0xa20

0xd4: Pop(1)
0xd5: Return(2)

0xd6: PushEmpty(int, int)
0xd7: PushEmpty(int, object)
0xd8: Stack[-1] = Stack[-5]
0xd9: Call 0x9cb

0xda: Stack[-3] = Stack[-2]
0xdb: Pop(2)
0xdc: Push((int) 0)
0xdd: Pop(1); Push((bool) Stack[-2] > Stack[-1])
0xde: IF (Stack[-1] == 0) GOTO 0xe9; Pop(1)

0xdf: Push((int) 1)
0xe0: Pop(1); Push((bool) Stack[-2] > Stack[-1])
0xe1: IF (Stack[-1] == 0) GOTO 0xe5; Pop(1)

0xe2: PushEmpty()
0xe3: Call 0x14d

0xe4: Pop(0)
0xe5: PushEmpty(object)
0xe6: Stack[-1] = Stack[-4]
0xe7: Call 0x9d5

0xe8: Pop(1)
0xe9: Return(2)

0xea: PushEmpty(int, int)
0xeb: PushEmpty(bool, object, object)
0xec: Stack[-2] = Stack[-7]
0xed: Stack[-1] = Stack[-6]
0xee: Call 0xad5

0xef: Pop(2)
0xf0: IF (Stack[-1] == 0) GOTO 0x103; Pop(1)

0xf1: PushEmpty(int, object)
0xf2: Stack[-1] = Stack[-6]
0xf3: Call 0x9dd

0xf4: Stack[-3] = Stack[-2]
0xf5: Pop(2)
0xf6: Push((int) 0)
0xf7: Pop(1); Push((bool) Stack[-2] > Stack[-1])
0xf8: IF (Stack[-1] == 0) GOTO 0x103; Pop(1)

0xf9: Push((int) 1)
0xfa: Pop(1); Push((bool) Stack[-2] > Stack[-1])
0xfb: IF (Stack[-1] == 0) GOTO 0xff; Pop(1)

0xfc: PushEmpty()
0xfd: Call 0x14d

0xfe: Pop(0)
0xff: PushEmpty(object)
0x100: Stack[-1] = Stack[-5]
0x101: Call 0x9e4

0x102: Pop(1)
0x103: Return(2)

0x104: PushEmpty(int, int)
0x105: PushEmpty(int, object)
0x106: Stack[-1] = Stack[-5]
0x107: Call 0x9ea

0x108: Stack[-3] = Stack[-2]
0x109: Pop(2)
0x10a: Push((int) 0)
0x10b: Pop(1); Push((bool) Stack[-2] > Stack[-1])
0x10c: IF (Stack[-1] == 0) GOTO 0x117; Pop(1)

0x10d: Push((int) 1)
0x10e: Pop(1); Push((bool) Stack[-2] > Stack[-1])
0x10f: IF (Stack[-1] == 0) GOTO 0x113; Pop(1)

0x110: PushEmpty()
0x111: Call 0x14d

0x112: Pop(0)
0x113: PushEmpty(object)
0x114: Stack[-1] = Stack[-4]
0x115: Call 0x9ed

0x116: Pop(1)
0x117: Return(2)

0x118: PushEmpty(int, int)
0x119: PushEmpty(int, string, object)
0x11a: Stack[-2] = Stack[-6]
0x11b: Stack[-1] = Stack[-7]
0x11c: Call 0x9ef

0x11d: Stack[-4] = Stack[-3]
0x11e: Pop(3)
0x11f: Push((int) 0)
0x120: Pop(1); Push((bool) Stack[-2] > Stack[-1])
0x121: IF (Stack[-1] == 0) GOTO 0x12d; Pop(1)

0x122: Push((int) 1)
0x123: Pop(1); Push((bool) Stack[-2] > Stack[-1])
0x124: IF (Stack[-1] == 0) GOTO 0x128; Pop(1)

0x125: PushEmpty()
0x126: Call 0x14d

0x127: Pop(0)
0x128: PushEmpty(string, object)
0x129: Stack[-2] = Stack[-5]
0x12a: Stack[-1] = Stack[-6]
0x12b: Call 0x9fb

0x12c: Pop(2)
0x12d: Return(2)

0x12e: PushEmpty()
0x12f: PushEmpty(object)
0x130: Stack[-1] = Stack[-2]
0x131: Call 0x166

0x132: Pop(1)
0x133: Return(0)

0x134: PushEmpty()
0x135: PushEmpty(object)
0x136: Stack[-1] = Stack[-2]
0x137: Call 0x166

0x138: Pop(1)
0x139: Return(0)

0x13a: PushEmpty()
0x13b: Push((int) 110)
0x13c: Pop(1); Push((bool) Stack[-2] != Stack[-1])
0x13d: IF (Stack[-1] == 0) GOTO 0x13f; Pop(1)

0x13e: Return(0)

0x13f: Stack[2 + Tasks[-1].StackPointer] = (bool)0
0x140: Push((int) 110)
0x141: @ KillTimer(Stack[-1])
0x142: Pop(1)
0x143: @ ResetAAS()
0x144: Pop(0)
0x145: Return(0)

0x146: PushEmpty()
0x147: Call 0x14d

0x148: Pop(0)
0x149: PushEmpty()
0x14a: Call 0xa26

0x14b: Pop(0)
0x14c: Return(0)

0x14d: Push((int) 110)
0x14e: @ KillTimer(Stack[-1])
0x14f: Pop(1)
0x150: Stack[2 + Tasks[-1].StackPointer] = (bool)0
0x151: PushEmpty()
0x152: Call 0x1ce

0x153: Pop(0)
0x154: Return(0)

0x155: Push((int) 110)
0x156: @ KillTimer(Stack[-1])
0x157: Pop(1)
0x158: Stack[2 + Tasks[-1].StackPointer] = (bool)0
0x159: PushEmpty()
0x15a: Call 0x1d5

0x15b: Pop(0)
0x15c: Return(0)

0x15d: PushEmpty()
0x15e: PushEmpty()
0x15f: Call 0x14d

0x160: Pop(0)
0x161: PushEmpty(object)
0x162: Stack[-1] = Stack[-2]
0x163: Call 0x994

0x164: Pop(1)
0x165: Return(0)

0x166: PushEmpty(bool, int, bool, int)
0x167: PushEmpty(bool, object)
0x168: Stack[-1] = Stack[-7]
0x169: Call 0x832

0x16a: Pop(1)
0x16b: Stack[-1] = !Stack[-1]
0x16c: IF (Stack[-1] == 0) GOTO 0x16e; Pop(1)

0x16d: Return(4)

0x16e: Push( Stack[2 + Tasks[-1].StackPointer] )
0x16f: IF (Stack[-1] == 0) GOTO 0x171; Pop(1)

0x170: Return(4)

0x171: @ IsPlayerActor(Stack[-5], Stack[-2])
0x172: Pop(0)
0x173: Stack[-2] = !Stack[-2]
0x174: IF (Stack[-1] == 0) GOTO 0x176; Pop(1)

0x175: Return(4)

0x176: PushEmpty(int, object)
0x177: Stack[-1] = Stack[-7]
0x178: Call 0x9ba

0x179: Stack[-3] = Stack[-2]
0x17a: Pop(2)
0x17b: Push((int) 0)
0x17c: Pop(1); Push((bool) Stack[-2] > Stack[-1])
0x17d: IF (Stack[-1] == 0) GOTO 0x18d; Pop(1)

0x17e: Push((int) 1)
0x17f: Pop(1); Push((bool) Stack[-2] > Stack[-1])
0x180: IF (Stack[-1] == 0) GOTO 0x184; Pop(1)

0x181: PushEmpty()
0x182: Call 0x155

0x183: Pop(0)
0x184: PushEmpty(object)
0x185: Stack[-1] = Stack[-6]
0x186: Call 0x9c3

0x187: Pop(1)
0x188: Stack[2 + Tasks[-1].StackPointer] = (bool)1
0x189: Push((int) 110)
0x18a: Push((float)10.0)
0x18b: @ SetTimer(Stack[-2], Stack[-1])
0x18c: Pop(2)
0x18d: Return(4)

0x18e: PushEmpty(float, cvector, cvector, float, bool, object, bool, float, cvector, cvector, float, bool, object, bool)
0x18f: Stack[0 + Tasks[-1].StackPointer] = (bool)0
0x190: Stack[1 + Tasks[-1].StackPointer] = (bool)0
0x191: Push((float)0.5)
0x192: @ rand(Stack[-8], Stack[-1])
0x193: Pop(1)
0x194: @ Sleep(Stack[-7])
0x195: Pop(0)
0x196: Stack[-0] = !Stack[-0]
0x197: IF (Stack[-1] == 0) GOTO 0x1c6; Pop(1)

0x198: Stack[-1] = !Stack[-1]
0x199: IF (Stack[-1] == 0) GOTO 0x1aa; Pop(1)

0x19a: @ GetPosition(Stack[-5])
0x19b: Pop(0)
0x19c: @ GetCameraFarDistance(Stack[-4])
0x19d: Pop(0)
0x19e: Push((float)2.5)
0x19f: Stack[-5] = Stack[-5] * Stack[-1] 
0x1a0: @ GetRandomPFPointInCircle(Stack[-6], Stack[-5], Stack[-4], Stack[-3])
0x1a1: Pop(0)
0x1a2: Push(Stack[-3])
0x1a3: IF (Stack[-1] == 0) GOTO 0x1a5; Pop(1)

0x1a4: GOTO 0x1a9

0x1a5: Push((int) 1)
0x1a6: @ Sleep(Stack[-1])
0x1a7: Pop(1)
0x1a8: GOTO 0x19a

0x1a9: GOTO 0x1ab

0x1aa: Stack[1 + Tasks[-1].StackPointer] = (bool)0
0x1ab: @ FindShiftedPathTo(Stack[-2], Stack[-6])
0x1ac: Pop(0)
0x1ad: Pop(0); Push((bool) Stack[-2] != 0)
0x1ae: IF (Stack[-1] == 0) GOTO 0x1c1; Pop(1)

0x1af: @ RotatePath(Stack[-2], Stack[-1])
0x1b0: Pop(0)
0x1b1: Push(Stack[-1])
0x1b2: IF (Stack[-1] == 0) GOTO 0x1c0; Pop(1)

0x1b3: PushEmpty(bool)
0x1b4: Call 0x1dc

0x1b5: Pop(0)
0x1b6: @ FollowPath(Stack[-3], Stack[-1], Stack[-2])
0x1b7: Pop(1)
0x1b8: Stack[-2] = 0
0x1b9: Push(Stack[-1])
0x1ba: IF (Stack[-1] == 0) GOTO 0x1c0; Pop(1)

0x1bb: PushEmpty()
0x1bc: TaskCall 3

0x1bd: Call 0x251

0x1be: TaskReturn

0x1bf: Pop(0)
0x1c0: GOTO 0x1c4

0x1c1: Push((int) 1)
0x1c2: @ Sleep(Stack[-1])
0x1c3: Pop(1)
0x1c4: Stack[-2] = 0
0x1c5: GOTO 0x196

0x1c6: Return(14)

0x1c7: PushEmpty()
0x1c8: @ RequestClearPath(Stack[-1])
0x1c9: Pop(0)
0x1ca: Return(0)

0x1cb: @ Stop()
0x1cc: Pop(0)
0x1cd: Return(0)

0x1ce: Stack[0 + Tasks[-1].StackPointer] = (bool)1
0x1cf: Stack[1 + Tasks[-1].StackPointer] = (bool)0
0x1d0: @ Stop()
0x1d1: Pop(0)
0x1d2: @ StopGroup0()
0x1d3: Pop(0)
0x1d4: Return(0)

0x1d5: Stack[0 + Tasks[-1].StackPointer] = (bool)1
0x1d6: Stack[1 + Tasks[-1].StackPointer] = (bool)1
0x1d7: @ Stop()
0x1d8: Pop(0)
0x1d9: @ StopGroup0()
0x1da: Pop(0)
0x1db: Return(0)

0x1dc: Stack[-1] = (bool) 0
0x1dd: Return(0)

0x1de: PushEmpty(int, int)
0x1df: PushEmpty(int, object)
0x1e0: Stack[-1] = Stack[-5]
0x1e1: Call 0xa1d

0x1e2: Stack[-3] = Stack[-2]
0x1e3: Pop(2)
0x1e4: Push((int) 0)
0x1e5: Pop(1); Push((bool) Stack[-2] > Stack[-1])
0x1e6: IF (Stack[-1] == 0) GOTO 0x1f1; Pop(1)

0x1e7: Push((int) 1)
0x1e8: Pop(1); Push((bool) Stack[-2] > Stack[-1])
0x1e9: IF (Stack[-1] == 0) GOTO 0x1ed; Pop(1)

0x1ea: PushEmpty()
0x1eb: Call 0x296

0x1ec: Pop(0)
0x1ed: PushEmpty(object)
0x1ee: Stack[-1] = Stack[-4]
0x1ef: Call 0xa20

0x1f0: Pop(1)
0x1f1: Return(2)

0x1f2: PushEmpty(int, int)
0x1f3: PushEmpty(int, object)
0x1f4: Stack[-1] = Stack[-5]
0x1f5: Call 0x9cb

0x1f6: Stack[-3] = Stack[-2]
0x1f7: Pop(2)
0x1f8: Push((int) 0)
0x1f9: Pop(1); Push((bool) Stack[-2] > Stack[-1])
0x1fa: IF (Stack[-1] == 0) GOTO 0x205; Pop(1)

0x1fb: Push((int) 1)
0x1fc: Pop(1); Push((bool) Stack[-2] > Stack[-1])
0x1fd: IF (Stack[-1] == 0) GOTO 0x201; Pop(1)

0x1fe: PushEmpty()
0x1ff: Call 0x296

0x200: Pop(0)
0x201: PushEmpty(object)
0x202: Stack[-1] = Stack[-4]
0x203: Call 0x9d5

0x204: Pop(1)
0x205: Return(2)

0x206: PushEmpty(int, int)
0x207: PushEmpty(bool, object, object)
0x208: Stack[-2] = Stack[-7]
0x209: Stack[-1] = Stack[-6]
0x20a: Call 0xad5

0x20b: Pop(2)
0x20c: IF (Stack[-1] == 0) GOTO 0x21f; Pop(1)

0x20d: PushEmpty(int, object)
0x20e: Stack[-1] = Stack[-6]
0x20f: Call 0x9dd

0x210: Stack[-3] = Stack[-2]
0x211: Pop(2)
0x212: Push((int) 0)
0x213: Pop(1); Push((bool) Stack[-2] > Stack[-1])
0x214: IF (Stack[-1] == 0) GOTO 0x21f; Pop(1)

0x215: Push((int) 1)
0x216: Pop(1); Push((bool) Stack[-2] > Stack[-1])
0x217: IF (Stack[-1] == 0) GOTO 0x21b; Pop(1)

0x218: PushEmpty()
0x219: Call 0x296

0x21a: Pop(0)
0x21b: PushEmpty(object)
0x21c: Stack[-1] = Stack[-5]
0x21d: Call 0x9e4

0x21e: Pop(1)
0x21f: Return(2)

0x220: PushEmpty(int, int)
0x221: PushEmpty(int, object)
0x222: Stack[-1] = Stack[-5]
0x223: Call 0x9ea

0x224: Stack[-3] = Stack[-2]
0x225: Pop(2)
0x226: Push((int) 0)
0x227: Pop(1); Push((bool) Stack[-2] > Stack[-1])
0x228: IF (Stack[-1] == 0) GOTO 0x233; Pop(1)

0x229: Push((int) 1)
0x22a: Pop(1); Push((bool) Stack[-2] > Stack[-1])
0x22b: IF (Stack[-1] == 0) GOTO 0x22f; Pop(1)

0x22c: PushEmpty()
0x22d: Call 0x296

0x22e: Pop(0)
0x22f: PushEmpty(object)
0x230: Stack[-1] = Stack[-4]
0x231: Call 0x9ed

0x232: Pop(1)
0x233: Return(2)

0x234: PushEmpty(int, int)
0x235: PushEmpty(int, string, object)
0x236: Stack[-2] = Stack[-6]
0x237: Stack[-1] = Stack[-7]
0x238: Call 0x9ef

0x239: Stack[-4] = Stack[-3]
0x23a: Pop(3)
0x23b: Push((int) 0)
0x23c: Pop(1); Push((bool) Stack[-2] > Stack[-1])
0x23d: IF (Stack[-1] == 0) GOTO 0x249; Pop(1)

0x23e: Push((int) 1)
0x23f: Pop(1); Push((bool) Stack[-2] > Stack[-1])
0x240: IF (Stack[-1] == 0) GOTO 0x244; Pop(1)

0x241: PushEmpty()
0x242: Call 0x296

0x243: Pop(0)
0x244: PushEmpty(string, object)
0x245: Stack[-2] = Stack[-5]
0x246: Stack[-1] = Stack[-6]
0x247: Call 0x9fb

0x248: Pop(2)
0x249: Return(2)

0x24a: PushEmpty()
0x24b: Call 0x296

0x24c: Pop(0)
0x24d: PushEmpty()
0x24e: Call 0xa26

0x24f: Pop(0)
0x250: Return(0)

0x251: PushEmpty(int, int, int, int, bool, float, bool, int, int, int, int, bool, float, bool)
0x252: @ WaitForAnimEnd()
0x253: Pop(0)
0x254: PushEmpty(bool)
0x255: Call 0x898

0x256: Pop(0)
0x257: Stack[-1] = !Stack[-1]
0x258: IF (Stack[-1] == 0) GOTO 0x25a; Pop(1)

0x259: Return(14)

0x25a: PushEmpty(int)
0x25b: Call 0x9a9

0x25c: Stack[-8] = Stack[-1]
0x25d: Pop(1)
0x25e: Stack[-6] = (int) 0
0x25f: PushEmpty(bool)
0x260: Stack[-1] = (bool) 0
0x261: Push((int) 5)
0x262: Pop(1); Push((bool) Stack[-8] < Stack[-1])
0x263: IF (Stack[-1] == 0) GOTO 0x269; Pop(1)

0x264: PushEmpty(bool)
0x265: Call 0x898

0x266: Pop(0)
0x267: IF (Stack[-1] == 0) GOTO 0x269; Pop(1)

0x268: Stack[-1] = (bool) 1
0x269: IF (Stack[-1] == 0) GOTO 0x295; Pop(1)

0x26a: Push((int) 3)
0x26b: @ irand(Stack[-6], Stack[-1])
0x26c: Pop(1)
0x26d: Push((int) 0)
0x26e: Pop(1); Push((bool) Stack[-6] == Stack[-1])
0x26f: IF (Stack[-1] == 0) GOTO 0x281; Pop(1)

0x270: Push(Stack[-7])
0x271: IF (Stack[-1] == 0) GOTO 0x280; Pop(1)

0x272: @ irand(Stack[-4], Stack[-7])
0x273: Pop(0)
0x274: Push("all")
0x275: PushEmpty(string, int)
0x276: Stack[-1] = Stack[-7]
0x277: Call 0x9a2

0x278: Pop(1)
0x279: @ PlayAnimation(Stack[-2], Stack[-1])
0x27a: Pop(2)
0x27b: @ WaitForAnimEnd(Stack[-3])
0x27c: Pop(0)
0x27d: Stack[-3] = !Stack[-3]
0x27e: IF (Stack[-1] == 0) GOTO 0x280; Pop(1)

0x27f: GOTO 0x295

0x280: GOTO 0x292

0x281: Push((int) 1)
0x282: Pop(1); Push((bool) Stack[-6] == Stack[-1])
0x283: IF (Stack[-1] == 0) GOTO 0x28f; Pop(1)

0x284: Push((int) 4)
0x285: @ rand(Stack[-3], Stack[-1])
0x286: Pop(1)
0x287: Push((int) 1)
0x288: Stack[-3] += Stack[-1]
0x289: @ Sleep(Stack[-1], Stack[-2])
0x28a: Pop(1)
0x28b: Stack[-1] = !Stack[-1]
0x28c: IF (Stack[-1] == 0) GOTO 0x28e; Pop(1)

0x28d: GOTO 0x295

0x28e: GOTO 0x292

0x28f: Push(Stack[-6])
0x290: IF (Stack[-1] == 0) GOTO 0x292; Pop(1)

0x291: GOTO 0x295

0x292: Push((int) 1)
0x293: Stack[-7] = Stack[-7] + Stack[-1] 
0x294: GOTO 0x25f

0x295: Return(14)

0x296: @ StopAnimation()
0x297: Pop(0)
0x298: @ StopGroup0()
0x299: Pop(0)
0x29a: Return(0)

0x29b: PushEmpty(cvector, cvector, bool, cvector, cvector, bool)
0x29c: Stack[0 + Tasks[-1].StackPointer] = Stack[-7]
0x29d: PushEmpty()
0x29e: Call 0x2ce

0x29f: Pop(0)
0x2a0: @ GetDirection(Stack[-3])
0x2a1: Pop(0)
0x2a2: PushEmpty(cvector, object)
0x2a3: Stack[-1] = Stack[0 + Tasks[-1].StackPointer]
0x2a4: Call 0x7ae

0x2a5: Stack[-4] = Stack[-2]
0x2a6: Pop(2)
0x2a7: PushEmpty(float, cvector, cvector)
0x2a8: Stack[-2] = Stack[-6]
0x2a9: Stack[-1] = Stack[-5]
0x2aa: Call 0x960

0x2ab: Pop(2)
0x2ac: Push((int) 0)
0x2ad: Pop(2); Push((bool) Stack[-2] < Stack[-1])
0x2ae: IF (Stack[-1] == 0) GOTO 0x2b5; Pop(1)

0x2af: PushEmpty(object)
0x2b0: Stack[-1] = Stack[0 + Tasks[-1].StackPointer]
0x2b1: Call 0x88d

0x2b2: Pop(1)
0x2b3: Stack[-1] = (bool) 1
0x2b4: GOTO 0x2b8

0x2b5: Push((float)1.5)
0x2b6: @ Sleep(Stack[-1], Stack[-2])
0x2b7: Pop(1)
0x2b8: Push(Stack[-1])
0x2b9: IF (Stack[-1] == 0) GOTO 0x2c8; Pop(1)

0x2ba: PushEmpty(object)
0x2bb: Stack[-1] = Stack[0 + Tasks[-1].StackPointer]
0x2bc: Call 0x88d

0x2bd: Pop(1)
0x2be: Push((int) 111)
0x2bf: Push((float)0.5)
0x2c0: @ SetTimer(Stack[-2], Stack[-1])
0x2c1: Pop(2)
0x2c2: Push((float)5.0)
0x2c3: @ Sleep(Stack[-1])
0x2c4: Pop(1)
0x2c5: Push((int) 111)
0x2c6: @ KillTimer(Stack[-1])
0x2c7: Pop(1)
0x2c8: @ StopAsync()
0x2c9: Pop(0)
0x2ca: Push("head")
0x2cb: @ UnlookAsync(Stack[-1])
0x2cc: Pop(1)
0x2cd: Return(6)

0x2ce: PushEmpty(object)
0x2cf: Stack[-1] = Stack[0 + Tasks[-1].StackPointer]
0x2d0: Call 0x91f

0x2d1: Pop(1)
0x2d2: Return(0)

0x2d3: PushEmpty(int, int)
0x2d4: PushEmpty(int, object)
0x2d5: Stack[-1] = Stack[-5]
0x2d6: Call 0xa1d

0x2d7: Stack[-3] = Stack[-2]
0x2d8: Pop(2)
0x2d9: Push((int) 0)
0x2da: Pop(1); Push((bool) Stack[-2] > Stack[-1])
0x2db: IF (Stack[-1] == 0) GOTO 0x2e6; Pop(1)

0x2dc: Push((int) 1)
0x2dd: Pop(1); Push((bool) Stack[-2] > Stack[-1])
0x2de: IF (Stack[-1] == 0) GOTO 0x2e2; Pop(1)

0x2df: PushEmpty()
0x2e0: Call 0x33f

0x2e1: Pop(0)
0x2e2: PushEmpty(object)
0x2e3: Stack[-1] = Stack[-4]
0x2e4: Call 0xa20

0x2e5: Pop(1)
0x2e6: Return(2)

0x2e7: PushEmpty(int, int)
0x2e8: PushEmpty(int, object)
0x2e9: Stack[-1] = Stack[-5]
0x2ea: Call 0x9cb

0x2eb: Stack[-3] = Stack[-2]
0x2ec: Pop(2)
0x2ed: Push((int) 0)
0x2ee: Pop(1); Push((bool) Stack[-2] > Stack[-1])
0x2ef: IF (Stack[-1] == 0) GOTO 0x2fa; Pop(1)

0x2f0: Push((int) 1)
0x2f1: Pop(1); Push((bool) Stack[-2] > Stack[-1])
0x2f2: IF (Stack[-1] == 0) GOTO 0x2f6; Pop(1)

0x2f3: PushEmpty()
0x2f4: Call 0x33f

0x2f5: Pop(0)
0x2f6: PushEmpty(object)
0x2f7: Stack[-1] = Stack[-4]
0x2f8: Call 0x9d5

0x2f9: Pop(1)
0x2fa: Return(2)

0x2fb: PushEmpty(int, int)
0x2fc: PushEmpty(bool, object, object)
0x2fd: Stack[-2] = Stack[-7]
0x2fe: Stack[-1] = Stack[-6]
0x2ff: Call 0xad5

0x300: Pop(2)
0x301: IF (Stack[-1] == 0) GOTO 0x314; Pop(1)

0x302: PushEmpty(int, object)
0x303: Stack[-1] = Stack[-6]
0x304: Call 0x9dd

0x305: Stack[-3] = Stack[-2]
0x306: Pop(2)
0x307: Push((int) 0)
0x308: Pop(1); Push((bool) Stack[-2] > Stack[-1])
0x309: IF (Stack[-1] == 0) GOTO 0x314; Pop(1)

0x30a: Push((int) 1)
0x30b: Pop(1); Push((bool) Stack[-2] > Stack[-1])
0x30c: IF (Stack[-1] == 0) GOTO 0x310; Pop(1)

0x30d: PushEmpty()
0x30e: Call 0x33f

0x30f: Pop(0)
0x310: PushEmpty(object)
0x311: Stack[-1] = Stack[-5]
0x312: Call 0x9e4

0x313: Pop(1)
0x314: Return(2)

0x315: PushEmpty(int, int)
0x316: PushEmpty(int, object)
0x317: Stack[-1] = Stack[-5]
0x318: Call 0x9ea

0x319: Stack[-3] = Stack[-2]
0x31a: Pop(2)
0x31b: Push((int) 0)
0x31c: Pop(1); Push((bool) Stack[-2] > Stack[-1])
0x31d: IF (Stack[-1] == 0) GOTO 0x328; Pop(1)

0x31e: Push((int) 1)
0x31f: Pop(1); Push((bool) Stack[-2] > Stack[-1])
0x320: IF (Stack[-1] == 0) GOTO 0x324; Pop(1)

0x321: PushEmpty()
0x322: Call 0x33f

0x323: Pop(0)
0x324: PushEmpty(object)
0x325: Stack[-1] = Stack[-4]
0x326: Call 0x9ed

0x327: Pop(1)
0x328: Return(2)

0x329: PushEmpty(int, int)
0x32a: PushEmpty(int, string, object)
0x32b: Stack[-2] = Stack[-6]
0x32c: Stack[-1] = Stack[-7]
0x32d: Call 0x9ef

0x32e: Stack[-4] = Stack[-3]
0x32f: Pop(3)
0x330: Push((int) 0)
0x331: Pop(1); Push((bool) Stack[-2] > Stack[-1])
0x332: IF (Stack[-1] == 0) GOTO 0x33e; Pop(1)

0x333: Push((int) 1)
0x334: Pop(1); Push((bool) Stack[-2] > Stack[-1])
0x335: IF (Stack[-1] == 0) GOTO 0x339; Pop(1)

0x336: PushEmpty()
0x337: Call 0x33f

0x338: Pop(0)
0x339: PushEmpty(string, object)
0x33a: Stack[-2] = Stack[-5]
0x33b: Stack[-1] = Stack[-6]
0x33c: Call 0x9fb

0x33d: Pop(2)
0x33e: Return(2)

0x33f: @ StopGroup0()
0x340: Pop(0)
0x341: @ StopAsync()
0x342: Pop(0)
0x343: Push("head")
0x344: @ UnlookAsync(Stack[-1])
0x345: Pop(1)
0x346: Push((int) 111)
0x347: @ KillTimer(Stack[-1])
0x348: Pop(1)
0x349: Return(0)

0x34a: PushEmpty()
0x34b: PushEmpty()
0x34c: Call 0x33f

0x34d: Pop(0)
0x34e: PushEmpty(object)
0x34f: Stack[-1] = Stack[-2]
0x350: Call 0x994

0x351: Pop(1)
0x352: Return(0)

0x353: PushEmpty(cvector, cvector, cvector, cvector)
0x354: Push((int) 111)
0x355: Pop(1); Push((bool) Stack[-6] != Stack[-1])
0x356: IF (Stack[-1] == 0) GOTO 0x358; Pop(1)

0x357: Return(4)

0x358: PushEmpty(bool, object)
0x359: Stack[-1] = Stack[0 + Tasks[-1].StackPointer]
0x35a: Call 0x832

0x35b: Pop(1)
0x35c: Stack[-1] = !Stack[-1]
0x35d: IF (Stack[-1] == 0) GOTO 0x362; Pop(1)

0x35e: PushEmpty()
0x35f: Call 0x33f

0x360: Pop(0)
0x361: Return(4)

0x362: @ GetDirection(Stack[-2])
0x363: Pop(0)
0x364: PushEmpty(cvector, object)
0x365: Stack[-1] = Stack[0 + Tasks[-1].StackPointer]
0x366: Call 0x7ae

0x367: Stack[-3] = Stack[-2]
0x368: Pop(2)
0x369: PushEmpty(float, cvector, cvector)
0x36a: Stack[-2] = Stack[-5]
0x36b: Stack[-1] = Stack[-4]
0x36c: Call 0x960

0x36d: Pop(2)
0x36e: Push((float)0.5)
0x36f: Pop(2); Push((bool) Stack[-2] < Stack[-1])
0x370: IF (Stack[-1] == 0) GOTO 0x375; Pop(1)

0x371: PushEmpty(object)
0x372: Stack[-1] = Stack[0 + Tasks[-1].StackPointer]
0x373: Call 0x88d

0x374: Pop(1)
0x375: Return(4)

0x376: PushEmpty()
0x377: Call 0x33f

0x378: Pop(0)
0x379: PushEmpty()
0x37a: Call 0xa26

0x37b: Pop(0)
0x37c: Return(0)

0x37d: PushEmpty()
0x37e: PushEmpty(object, bool, float)
0x37f: Stack[-3] = Stack[-4]
0x380: Stack[-2] = (bool) 1
0x381: Stack[-1] = (float) 180.0
0x382: Call 0x38b

0x383: Pop(3)
0x384: Return(0)

0x385: PushEmpty()
0x386: Stack[-3] = (float) 0.05
0x387: Return(0)

0x388: PushEmpty()
0x389: Stack[-3] = (int) 0
0x38a: Return(0)

0x38b: PushEmpty(bool, bool, float, cvector, cvector, bool, bool, cvector, float, float, bool, bool, float, cvector, cvector, bool, bool, cvector, float, float)
0x38c: Stack[1 + Tasks[-1].StackPointer] = (int)0
0x38d: Push("all")
0x38e: Push("attack_begin")
0x38f: Push((int) 1)
0x390: Stack[-1] += Stack[-1]
0x391: Stack[-2] += Stack[-1]
0x392: @ HasAnimation(Stack[-12], Stack[-2], Stack[-1])
0x393: Pop(2)
0x394: Stack[-10] = !Stack[-10]
0x395: IF (Stack[-1] == 0) GOTO 0x397; Pop(1)

0x396: GOTO 0x39a

0x397: Push((int) 1)
0x398: Stack[-1] = Stack[-1] + Stack[-1] 
0x399: GOTO 0x38d

0x39a: Stack[2 + Tasks[-1].StackPointer] = (int)0
0x39b: Push("attack")
0x39c: Push((int) 1)
0x39d: Stack[-2] += Stack[-1]
0x39e: Stack[-2] += Stack[-1]
0x39f: @ IsExisting3DSound(Stack[-10], Stack[-1])
0x3a0: Pop(1)
0x3a1: Stack[-9] = !Stack[-9]
0x3a2: IF (Stack[-1] == 0) GOTO 0x3a4; Pop(1)

0x3a3: GOTO 0x3a7

0x3a4: Push((int) 1)
0x3a5: Stack[-2] = Stack[-2] + Stack[-1] 
0x3a6: GOTO 0x39b

0x3a7: Stack[4 + Tasks[-1].StackPointer] = (int)0
0x3a8: Push("@GetAttackDistance")
0x3a9: Push((int) 1)
0x3aa: FuncExist 1 = 25, 2 (TaskVar=2)
0x3ab: IF (Stack[-1] == 0) GOTO 0x3b1; Pop(1)

0x3ac: @@ GetAttackDistance(Stack[-8])
0x3ad: Pop(0)
0x3ae: Push((int) 50)
0x3af: Stack[-9] = Stack[-9] + Stack[-1] 
0x3b0: GOTO 0x3b2

0x3b1: Stack[-8] = Stack[-21]
0x3b2: Push((int) 150)
0x3b3: Pop(1); Push((bool) Stack[-9] >= Stack[-1])
0x3b4: IF (Stack[-1] == 0) GOTO 0x3b6; Pop(1)

0x3b5: Stack[-8] = (int) 150
0x3b6: Stack[3 + Tasks[-1].StackPointer] = (bool)0
0x3b7: Stack[0 + Tasks[-1].StackPointer] = Stack[-23]
0x3b8: @ IsPlayerActor(Stack[-0], Stack[-5])
0x3b9: Pop(0)
0x3ba: Push(Stack[-22])
0x3bb: IF (Stack[-1] == 0) GOTO 0x3be; Pop(1)

0x3bc: Stack[-4] = (bool) 0
0x3bd: GOTO 0x3bf

0x3be: Stack[-4] = (bool) 1
0x3bf: PushEmpty(bool)
0x3c0: Stack[-1] = (bool) 0
0x3c1: PushEmpty(bool, object)
0x3c2: Stack[-1] = Stack[0 + Tasks[-1].StackPointer]
0x3c3: Call 0x832

0x3c4: Pop(1)
0x3c5: IF (Stack[-1] == 0) GOTO 0x3c9; Pop(1)

0x3c6: Stack[-3] = !Stack[-3]
0x3c7: IF (Stack[-1] == 0) GOTO 0x3c9; Pop(1)

0x3c8: Stack[-1] = (bool) 1
0x3c9: IF (Stack[-1] == 0) GOTO 0x447; Pop(1)

0x3ca: @@ GetPFPosition(Stack[-7])
0x3cb: Pop(0)
0x3cc: @ GetPFPosition(Stack[-6])
0x3cd: Pop(0)
0x3ce: Stack[-3] = Stack[-7] - Stack[-6] 
0x3cf: Stack[-2] = Stack[-3] | Stack[-3] 
0x3d0: Push((float)400.0)
0x3d1: Stack[-1] += Stack[-9]
0x3d2: Push((float)400.0)
0x3d3: Stack[-1] += Stack[-10]
0x3d4: Stack[-2] *= Stack[-1]
0x3d5: Pop(1); Push((bool) Stack[-3] >= Stack[-1])
0x3d6: IF (Stack[-1] == 0) GOTO 0x3e6; Pop(1)

0x3d7: PushEmpty(bool, object, float, float, bool, bool)
0x3d8: Stack[-5] = Stack[0 + Tasks[-1].StackPointer]
0x3d9: Stack[-4] = Stack[-14]
0x3da: Stack[-3] = (float) 3000.0
0x3db: Stack[-2] = (bool) 1
0x3dc: Stack[-1] = (bool) 0
0x3dd: TaskCall 6

0x3de: Call 0x57d

0x3df: TaskReturn

0x3e0: Pop(5)
0x3e1: Stack[-1] = !Stack[-1]
0x3e2: IF (Stack[-1] == 0) GOTO 0x3e4; Pop(1)

0x3e3: GOTO 0x447

0x3e4: Stack[-4] = (bool) 0
0x3e5: GOTO 0x446

0x3e6: Stack[-21] *= Stack[-21]
0x3e7: Pop(1); Push((bool) Stack[-3] >= Stack[-1])
0x3e8: IF (Stack[-1] == 0) GOTO 0x43e; Pop(1)

0x3e9: Stack[-4] = !Stack[-4]
0x3ea: IF (Stack[-1] == 0) GOTO 0x3f8; Pop(1)

0x3eb: PushEmpty(object)
0x3ec: Stack[-1] = Stack[0 + Tasks[-1].StackPointer]
0x3ed: Call 0x88d

0x3ee: Pop(1)
0x3ef: Push("all")
0x3f0: Push("attack_on")
0x3f1: @ PlayAnimation(Stack[-2], Stack[-1])
0x3f2: Pop(2)
0x3f3: @ WaitForAnimEnd()
0x3f4: Pop(0)
0x3f5: @ StopAsync()
0x3f6: Pop(0)
0x3f7: Stack[-4] = (bool) 1
0x3f8: @ rand(Stack[-1])
0x3f9: Pop(0)
0x3fa: PushEmpty(bool)
0x3fb: Stack[-1] = (bool) 1
0x3fc: Push((float)0.6)
0x3fd: Pop(1); Push((bool) Stack[-3] < Stack[-1])
0x3fe: IF (Stack[-1] == 0) GOTO 0x404; Pop(1)

0x3ff: PushEmpty(bool)
0x400: Call 0x543

0x401: Pop(0)
0x402: IF (Stack[-1] == 0) GOTO 0x404; Pop(1)

0x403: Stack[-1] = (bool) 0
0x404: IF (Stack[-1] == 0) GOTO 0x412; Pop(1)

0x405: @ Face(Stack[-0])
0x406: Pop(0)
0x407: Push("all")
0x408: Push("attack_stay")
0x409: @ PlayAnimation(Stack[-2], Stack[-1])
0x40a: Pop(2)
0x40b: PushEmpty(bool, float)
0x40c: Stack[-1] = Stack[-23]
0x40d: Call 0x4e7

0x40e: Pop(2)
0x40f: @ StopAsync()
0x410: Pop(0)
0x411: GOTO 0x43d

0x412: @ Face(Stack[-0])
0x413: Pop(0)
0x414: Push("all")
0x415: Push("fjump")
0x416: @ PlayAnimation(Stack[-2], Stack[-1])
0x417: Pop(2)
0x418: @ WaitForAnimEnd()
0x419: Pop(0)
0x41a: Push(CVector(0.0, 0.0, 0.0))
0x41b: @ SetSpeed(Stack[-1])
0x41c: Pop(1)
0x41d: @ Stop()
0x41e: Pop(0)
0x41f: @ StopAsync()
0x420: Pop(0)
0x421: PushEmpty(bool)
0x422: Call 0x543

0x423: Pop(0)
0x424: Stack[-1] = !Stack[-1]
0x425: IF (Stack[-1] == 0) GOTO 0x43d; Pop(1)

0x426: PushEmpty(bool, object)
0x427: Stack[-1] = Stack[0 + Tasks[-1].StackPointer]
0x428: Call 0x832

0x429: Pop(1)
0x42a: Stack[-1] = !Stack[-1]
0x42b: IF (Stack[-1] == 0) GOTO 0x42d; Pop(1)

0x42c: GOTO 0x447

0x42d: @@ GetPFPosition(Stack[-7])
0x42e: Pop(0)
0x42f: @ GetPFPosition(Stack[-6])
0x430: Pop(0)
0x431: Stack[-3] = Stack[-7] - Stack[-6] 
0x432: Stack[-2] = Stack[-3] | Stack[-3] 
0x433: Stack[-21] *= Stack[-21]
0x434: Pop(1); Push((bool) Stack[-3] < Stack[-1])
0x435: IF (Stack[-1] == 0) GOTO 0x43d; Pop(1)

0x436: PushEmpty(bool, float)
0x437: Stack[-1] = Stack[-23]
0x438: Call 0x47f

0x439: Pop(1)
0x43a: Stack[-1] = !Stack[-1]
0x43b: IF (Stack[-1] == 0) GOTO 0x43d; Pop(1)

0x43c: GOTO 0x447

0x43d: GOTO 0x446

0x43e: PushEmpty(bool, float)
0x43f: Stack[-1] = Stack[-23]
0x440: Call 0x47f

0x441: Pop(1)
0x442: Stack[-1] = !Stack[-1]
0x443: IF (Stack[-1] == 0) GOTO 0x445; Pop(1)

0x444: GOTO 0x447

0x445: Stack[-4] = (bool) 1
0x446: GOTO 0x3bf

0x447: @ WaitForAnimEnd()
0x448: Pop(0)
0x449: Push( Stack[3 + Tasks[-1].StackPointer] )
0x44a: IF (Stack[-1] == 0) GOTO 0x44c; Pop(1)

0x44b: Return(20)

0x44c: Push("all")
0x44d: Push("attack_off")
0x44e: @ PlayAnimation(Stack[-2], Stack[-1])
0x44f: Pop(2)
0x450: @ WaitForAnimEnd()
0x451: Pop(0)
0x452: Push(Stack[-5])
0x453: IF (Stack[-1] == 0) GOTO 0x457; Pop(1)

0x454: Push((float)2.0)
0x455: @ Sleep(Stack[-1])
0x456: Pop(1)
0x457: Return(20)

0x458: PushEmpty(object, float, float, object, float, float)
0x459: Push((float)0.9)
0x45a: Stack[-9] *= Stack[-1]
0x45b: @ GetVictim(Stack[-1], Stack[-4])
0x45c: Pop(1)
0x45d: @ ReportAttack(Stack[-0])
0x45e: Pop(0)
0x45f: Pop(0); Push((bool) Stack[-3] == Stack[0 + Tasks[-1].StackPointer])
0x460: IF (Stack[-1] == 0) GOTO 0x47d; Pop(1)

0x461: PushEmpty(float, object, int)
0x462: Stack[-2] = Stack[-6]
0x463: Stack[-1] = Stack[-10]
0x464: Call 0x385

0x465: Stack[-5] = Stack[-3]
0x466: Pop(3)
0x467: PushEmpty(float, object, float, int)
0x468: Stack[-3] = Stack[-7]
0x469: Stack[-2] = Stack[-6]
0x46a: PushEmpty(int, object, int)
0x46b: Stack[-2] = Stack[-10]
0x46c: Stack[-1] = Stack[-14]
0x46d: Call 0x388

0x46e: Stack[-4] = Stack[-3]
0x46f: Pop(3)
0x470: Call 0x7c9

0x471: Stack[-5] = Stack[-4]
0x472: Pop(4)
0x473: PushEmpty(int)
0x474: Call 0x56e

0x475: Pop(0)
0x476: @ ReportHit(Stack[-0], Stack[-1], Stack[-2], Stack[-3])
0x477: Pop(1)
0x478: PushEmpty(object, float)
0x479: Stack[-2] = Stack[-5]
0x47a: Stack[-1] = Stack[-3]
0x47b: Call 0x570

0x47c: Pop(2)
0x47d: Return(6)

0x47e: Stack[-3] = 0
0x47f: PushEmpty(int, bool, int, bool)
0x480: @ irand(Stack[-2], Stack[-1])
0x481: Pop(0)
0x482: Push((int) 1)
0x483: Stack[-3] = Stack[-3] + Stack[-1] 
0x484: @ Face(Stack[-0])
0x485: Pop(0)
0x486: Push((bool) 1)
0x487: @ SetAttackState(Stack[-1])
0x488: Pop(1)
0x489: Push("all")
0x48a: Push("attack_begin")
0x48b: Stack[-1] += Stack[-4]
0x48c: @ PlayAnimation(Stack[-2], Stack[-1])
0x48d: Pop(2)
0x48e: @ WaitForAnimEnd()
0x48f: Pop(0)
0x490: PushEmpty()
0x491: Call 0x54e

0x492: Pop(0)
0x493: PushEmpty(bool, object)
0x494: Stack[-1] = Stack[0 + Tasks[-1].StackPointer]
0x495: Call 0x832

0x496: Pop(1)
0x497: Stack[-1] = !Stack[-1]
0x498: IF (Stack[-1] == 0) GOTO 0x49d; Pop(1)

0x499: @ StopAsync()
0x49a: Pop(0)
0x49b: Stack[-6] = (bool) 0
0x49c: Return(4)

0x49d: PushEmpty(float, int)
0x49e: Stack[-2] = Stack[-7]
0x49f: Stack[-1] = Stack[-4]
0x4a0: Call 0x458

0x4a1: Pop(2)
0x4a2: Push("all")
0x4a3: Push("attack_middle")
0x4a4: Stack[-1] += Stack[-4]
0x4a5: @ HasAnimation(Stack[-3], Stack[-2], Stack[-1])
0x4a6: Pop(2)
0x4a7: Push(Stack[-1])
0x4a8: IF (Stack[-1] == 0) GOTO 0x4bf; Pop(1)

0x4a9: Push("all")
0x4aa: Push("attack_middle")
0x4ab: Stack[-1] += Stack[-4]
0x4ac: @ PlayAnimation(Stack[-2], Stack[-1])
0x4ad: Pop(2)
0x4ae: @ WaitForAnimEnd()
0x4af: Pop(0)
0x4b0: PushEmpty(bool, object)
0x4b1: Stack[-1] = Stack[0 + Tasks[-1].StackPointer]
0x4b2: Call 0x832

0x4b3: Pop(1)
0x4b4: Stack[-1] = !Stack[-1]
0x4b5: IF (Stack[-1] == 0) GOTO 0x4ba; Pop(1)

0x4b6: @ StopAsync()
0x4b7: Pop(0)
0x4b8: Stack[-6] = (bool) 0
0x4b9: Return(4)

0x4ba: PushEmpty(float, int)
0x4bb: Stack[-2] = Stack[-7]
0x4bc: Stack[-1] = Stack[-4]
0x4bd: Call 0x458

0x4be: Pop(2)
0x4bf: Push((bool) 0)
0x4c0: @ SetAttackState(Stack[-1])
0x4c1: Pop(1)
0x4c2: Push("all")
0x4c3: Push("attack_end")
0x4c4: Stack[-1] += Stack[-4]
0x4c5: @ PlayAnimation(Stack[-2], Stack[-1])
0x4c6: Pop(2)
0x4c7: PushEmpty(bool, float)
0x4c8: Stack[-1] = (float) 0.75
0x4c9: Call 0x4cf

0x4ca: Pop(2)
0x4cb: @ StopAsync()
0x4cc: Pop(0)
0x4cd: Stack[-6] = (bool) 1
0x4ce: Return(4)

0x4cf: PushEmpty(float, bool, float, bool)
0x4d0: @ rand(Stack[-2])
0x4d1: Pop(0)
0x4d2: Pop(0); Push((bool) Stack[-2] < Stack[-5])
0x4d3: IF (Stack[-1] == 0) GOTO 0x4e3; Pop(1)

0x4d4: @ IsAnimationPlaying(Stack[-1])
0x4d5: Pop(0)
0x4d6: Stack[-1] = !Stack[-1]
0x4d7: IF (Stack[-1] == 0) GOTO 0x4d9; Pop(1)

0x4d8: GOTO 0x4e2

0x4d9: PushEmpty(bool)
0x4da: Call 0x50f

0x4db: Pop(0)
0x4dc: IF (Stack[-1] == 0) GOTO 0x4df; Pop(1)

0x4dd: Stack[-6] = (bool) 1
0x4de: Return(4)

0x4df: @ sync()
0x4e0: Pop(0)
0x4e1: GOTO 0x4d4

0x4e2: GOTO 0x4e5

0x4e3: @ WaitForAnimEnd()
0x4e4: Pop(0)
0x4e5: Stack[-6] = (bool) 0
0x4e6: Return(4)

0x4e7: PushEmpty(bool, cvector, cvector, cvector, float, bool, cvector, cvector, cvector, float)
0x4e8: @ IsAnimationPlaying(Stack[-5])
0x4e9: Pop(0)
0x4ea: Stack[-5] = !Stack[-5]
0x4eb: IF (Stack[-1] == 0) GOTO 0x4ed; Pop(1)

0x4ec: GOTO 0x50d

0x4ed: PushEmpty(bool)
0x4ee: Call 0x50f

0x4ef: Pop(0)
0x4f0: IF (Stack[-1] == 0) GOTO 0x4f3; Pop(1)

0x4f1: Stack[-12] = (bool) 1
0x4f2: Return(10)

0x4f3: PushEmpty(bool, object)
0x4f4: Stack[-1] = Stack[0 + Tasks[-1].StackPointer]
0x4f5: Call 0x832

0x4f6: Pop(1)
0x4f7: Stack[-1] = !Stack[-1]
0x4f8: IF (Stack[-1] == 0) GOTO 0x4fb; Pop(1)

0x4f9: Stack[-12] = (bool) 0
0x4fa: Return(10)

0x4fb: @@ GetPFPosition(Stack[-4])
0x4fc: Pop(0)
0x4fd: @ GetPFPosition(Stack[-3])
0x4fe: Pop(0)
0x4ff: Stack[-2] = Stack[-4] - Stack[-3] 
0x500: Stack[-1] = Stack[-2] | Stack[-2] 
0x501: Stack[-11] *= Stack[-11]
0x502: Pop(1); Push((bool) Stack[-2] < Stack[-1])
0x503: IF (Stack[-1] == 0) GOTO 0x50a; Pop(1)

0x504: PushEmpty(bool, float)
0x505: Stack[-1] = Stack[-13]
0x506: Call 0x47f

0x507: Pop(2)
0x508: Stack[-12] = (bool) 1
0x509: Return(10)

0x50a: @ sync()
0x50b: Pop(0)
0x50c: GOTO 0x4e8

0x50d: Stack[-12] = (bool) 0
0x50e: Return(10)

0x50f: PushEmpty(cvector, cvector, cvector, float, float, cvector, cvector, cvector, float, float)
0x510: PushEmpty(bool, object)
0x511: Stack[-1] = Stack[0 + Tasks[-1].StackPointer]
0x512: Call 0x832

0x513: Pop(1)
0x514: Stack[-1] = !Stack[-1]
0x515: IF (Stack[-1] == 0) GOTO 0x518; Pop(1)

0x516: Stack[-11] = (bool) 0
0x517: Return(10)

0x518: PushEmpty(bool)
0x519: Call 0x543

0x51a: Pop(0)
0x51b: IF (Stack[-1] == 0) GOTO 0x52e; Pop(1)

0x51c: @@ GetPFPosition(Stack[-5])
0x51d: Pop(0)
0x51e: @ GetPFPosition(Stack[-4])
0x51f: Pop(0)
0x520: Stack[-3] = Stack[-5] - Stack[-4] 
0x521: Stack[-2] = Stack[-3] | Stack[-3] 
0x522: @@ GetAttackDistance(Stack[-1])
0x523: Pop(0)
0x524: Push((int) 50)
0x525: Stack[-2] = Stack[-2] + Stack[-1] 
0x526: Stack[-1] *= Stack[-1]
0x527: Pop(1); Push((bool) Stack[-3] <= Stack[-1])
0x528: IF (Stack[-1] == 0) GOTO 0x52e; Pop(1)

0x529: PushEmpty()
0x52a: Call 0x530

0x52b: Pop(0)
0x52c: Stack[-11] = (bool) 1
0x52d: Return(10)

0x52e: Stack[-11] = (bool) 0
0x52f: Return(10)

0x530: PushEmpty(cvector, cvector, cvector, cvector)
0x531: @ Face(Stack[-0])
0x532: Pop(0)
0x533: Push("all")
0x534: Push("bjump")
0x535: @ PlayAnimation(Stack[-2], Stack[-1])
0x536: Pop(2)
0x537: @@ GetPFPosition(Stack[-2])
0x538: Pop(0)
0x539: @ GetPFPosition(Stack[-1])
0x53a: Pop(0)
0x53b: @ WaitForAnimEnd()
0x53c: Pop(0)
0x53d: @ StopAsync()
0x53e: Pop(0)
0x53f: Push(CVector(0.0, 0.0, 0.0))
0x540: @ SetSpeed(Stack[-1])
0x541: Pop(1)
0x542: Return(4)

0x543: PushEmpty(bool, bool)
0x544: Push("IsAttacking")
0x545: Push((int) 1)
0x546: FuncExist 1 = 0, 2 (TaskVar=130)
0x547: IF (Stack[-1] == 0) GOTO 0x54c; Pop(1)

0x548: @@ IsAttacking(Stack[-1])
0x549: Pop(0)
0x54a: Stack[-3] = Stack[-1]
0x54b: Return(2)

0x54c: Stack[-3] = (bool) 0
0x54d: Return(2)

0x54e: PushEmpty(float, int, float, int)
0x54f: Stack[-2] = !Stack[-2]
0x550: IF (Stack[-1] == 0) GOTO 0x552; Pop(1)

0x551: Return(4)

0x552: Push( Stack[4 + Tasks[-1].StackPointer] )
0x553: IF (Stack[-1] == 0) GOTO 0x55a; Pop(1)

0x554: Push((int) 4294967295)
0x555: Stack[-4] = Stack[-4] + Stack[-1] 
0x556: Push((int) 0)
0x557: Pop(1); Push((bool) Stack[-4] > Stack[-1])
0x558: IF (Stack[-1] == 0) GOTO 0x55a; Pop(1)

0x559: Return(4)

0x55a: @ rand(Stack[-2])
0x55b: Pop(0)
0x55c: PushEmpty(float)
0x55d: Call 0x574

0x55e: Pop(0)
0x55f: Pop(1); Push((bool) Stack[-3] < Stack[-1])
0x560: IF (Stack[-1] == 0) GOTO 0x56d; Pop(1)

0x561: @ irand(Stack[-1], Stack[-2])
0x562: Pop(0)
0x563: Push((int) 1)
0x564: Stack[-2] = Stack[-2] + Stack[-1] 
0x565: Push("attack")
0x566: Stack[-1] += Stack[-2]
0x567: @ Speak(Stack[-1])
0x568: Pop(1)
0x569: PushEmpty(int)
0x56a: Call 0x572

0x56b: Stack[4 + Tasks[-1].StackPointer] = Stack[-1]
0x56c: Pop(1)
0x56d: Return(4)

0x56e: Stack[-1] = (int) 0
0x56f: Return(0)

0x570: PushEmpty()
0x571: Return(0)

0x572: Stack[-1] = (int) 1
0x573: Return(0)

0x574: Stack[-1] = (float) 0.5
0x575: Return(0)

0x576: PushEmpty()
0x577: Call 0x5f9

0x578: Pop(0)
0x579: PushEmpty()
0x57a: Call 0xa26

0x57b: Pop(0)
0x57c: Return(0)

0x57d: PushEmpty(bool, bool, object, cvector, cvector, cvector, float, object, bool, bool, object, cvector, cvector, cvector, float, object)
0x57e: Stack[0 + Tasks[-1].StackPointer] = (bool)0
0x57f: Stack[1 + Tasks[-1].StackPointer] = Stack[-21]
0x580: Stack[-7] = Stack[-17]
0x581: PushEmpty(bool, object)
0x582: Stack[-1] = Stack[-23]
0x583: Call 0x609

0x584: Pop(1)
0x585: Stack[-1] = !Stack[-1]
0x586: IF (Stack[-1] == 0) GOTO 0x589; Pop(1)

0x587: Stack[-22] = (bool) 0
0x588: Return(16)

0x589: @@ GetPosition(Stack[-5])
0x58a: Pop(0)
0x58b: @ GetPosition(Stack[-4])
0x58c: Pop(0)
0x58d: Stack[-3] = Stack[-5] - Stack[-4] 
0x58e: Stack[-2] = Stack[-3] | Stack[-3] 
0x58f: PushEmpty(bool)
0x590: Stack[-1] = (bool) 0
0x591: Push((int) 0)
0x592: Pop(1); Push((bool) Stack[-21] > Stack[-1])
0x593: IF (Stack[-1] == 0) GOTO 0x598; Pop(1)

0x594: Stack[-20] *= Stack[-20]
0x595: Pop(1); Push((bool) Stack[-4] > Stack[-1])
0x596: IF (Stack[-1] == 0) GOTO 0x598; Pop(1)

0x597: Stack[-1] = (bool) 1
0x598: IF (Stack[-1] == 0) GOTO 0x59d; Pop(1)

0x599: @ Stop()
0x59a: Pop(0)
0x59b: Stack[-22] = (bool) 0
0x59c: Return(16)

0x59d: Stack[-20] *= Stack[-20]
0x59e: Pop(1); Push((bool) Stack[-3] > Stack[-1])
0x59f: IF (Stack[-1] == 0) GOTO 0x5db; Pop(1)

0x5a0: @@ GetPFPosition(Stack[-5])
0x5a1: Pop(0)
0x5a2: @ FindPathTo(Stack[-1], Stack[-5])
0x5a3: Pop(0)
0x5a4: Pop(0); Push((bool) Stack[-1] != 0)
0x5a5: IF (Stack[-1] == 0) GOTO 0x5a8; Pop(1)

0x5a6: Stack[-6] = Stack[-1]
0x5a7: Stack[-1] = 0
0x5a8: Pop(0); Push((bool) Stack[-6] != 0)
0x5a9: IF (Stack[-1] == 0) GOTO 0x5c9; Pop(1)

0x5aa: Push(Stack[-7])
0x5ab: IF (Stack[-1] == 0) GOTO 0x5b2; Pop(1)

0x5ac: Stack[-7] = (bool) 0
0x5ad: @ RotatePath(Stack[-6], Stack[-8])
0x5ae: Pop(0)
0x5af: Stack[-8] = !Stack[-8]
0x5b0: IF (Stack[-1] == 0) GOTO 0x5b2; Pop(1)

0x5b1: GOTO 0x5e1

0x5b2: Push((int) 0)
0x5b3: Push((float)0.3)
0x5b4: @ SetTimer(Stack[-2], Stack[-1])
0x5b5: Pop(2)
0x5b6: PushEmpty(string)
0x5b7: Call 0x610

0x5b8: Pop(0)
0x5b9: PushEmpty(string)
0x5ba: Call 0x612

0x5bb: Pop(0)
0x5bc: @ FollowPath(Stack[-8], Stack[-20], Stack[-10], Stack[-2], Stack[-1])
0x5bd: Pop(2)
0x5be: Stack[-8] = !Stack[-8]
0x5bf: IF (Stack[-1] == 0) GOTO 0x5c7; Pop(1)

0x5c0: Push( Stack[0 + Tasks[-1].StackPointer] )
0x5c1: IF (Stack[-1] == 0) GOTO 0x5c5; Pop(1)

0x5c2: Stack[-6] = 0
0x5c3: GOTO 0x5e1

0x5c4: GOTO 0x5c6

0x5c5: GOTO 0x5e0

0x5c6: GOTO 0x5c8

0x5c7: Stack[-6] = 0
0x5c8: GOTO 0x5d9

0x5c9: Push((int) 0)
0x5ca: @ KillTimer(Stack[-1])
0x5cb: Pop(1)
0x5cc: Push((float)0.5)
0x5cd: @ Sleep(Stack[-1], Stack[-9])
0x5ce: Pop(1)
0x5cf: Stack[-8] = !Stack[-8]
0x5d0: IF (Stack[-1] == 0) GOTO 0x5d5; Pop(1)

0x5d1: Push( Stack[0 + Tasks[-1].StackPointer] )
0x5d2: IF (Stack[-1] == 0) GOTO 0x5d5; Pop(1)

0x5d3: Stack[-6] = 0
0x5d4: GOTO 0x5e1

0x5d5: Push((int) 0)
0x5d6: Push((float)0.3)
0x5d7: @ SetTimer(Stack[-2], Stack[-1])
0x5d8: Pop(2)
0x5d9: Stack[-1] = 0
0x5da: GOTO 0x5df

0x5db: Push((int) 0)
0x5dc: @ KillTimer(Stack[-1])
0x5dd: Pop(1)
0x5de: GOTO 0x5e1

0x5df: Stack[-6] = 0
0x5e0: GOTO 0x581

0x5e1: Stack[-22] = !Stack[-0])
0x5e2: Return(16)

0x5e3: PushEmpty()
0x5e4: Push((int) 0)
0x5e5: Pop(1); Push((bool) Stack[-2] != Stack[-1])
0x5e6: IF (Stack[-1] == 0) GOTO 0x5e8; Pop(1)

0x5e7: Return(0)

0x5e8: PushEmpty(bool, object)
0x5e9: Stack[-1] = Stack[1 + Tasks[-1].StackPointer]
0x5ea: Call 0x609

0x5eb: Pop(1)
0x5ec: Stack[-1] = !Stack[-1]
0x5ed: IF (Stack[-1] == 0) GOTO 0x5ef; Pop(1)

0x5ee: Stack[0 + Tasks[-1].StackPointer] = (bool)1
0x5ef: Push((int) 0)
0x5f0: @ KillTimer(Stack[-1])
0x5f1: Pop(1)
0x5f2: @ Stop()
0x5f3: Pop(0)
0x5f4: Return(0)

0x5f5: PushEmpty()
0x5f6: @ RequestClearPath(Stack[-1])
0x5f7: Pop(0)
0x5f8: Return(0)

0x5f9: Stack[0 + Tasks[-1].StackPointer] = (bool)1
0x5fa: Push((int) 0)
0x5fb: @ KillTimer(Stack[-1])
0x5fc: Pop(1)
0x5fd: @ Stop()
0x5fe: Pop(0)
0x5ff: Return(0)

0x600: PushEmpty()
0x601: PushEmpty()
0x602: Call 0x5f9

0x603: Pop(0)
0x604: PushEmpty(object)
0x605: Stack[-1] = Stack[-2]
0x606: Call 0x994

0x607: Pop(1)
0x608: Return(0)

0x609: PushEmpty()
0x60a: PushEmpty(bool, object)
0x60b: Stack[-1] = Stack[-3]
0x60c: Call 0x832

0x60d: Stack[-4] = Stack[-2]
0x60e: Pop(2)
0x60f: Return(0)

0x610: Stack[-1] = "walk"
0x611: Return(0)

0x612: Stack[-1] = "run"
0x613: Return(0)

0x614: PushEmpty(object, bool, int, bool, object, bool, int, bool)
0x615: Stack[0 + Tasks[-1].StackPointer] = Stack[-9]
0x616: PushEmpty(bool, object)
0x617: Stack[-1] = Stack[-11]
0x618: Call 0x89d

0x619: Pop(1)
0x61a: Stack[-1] = !Stack[-1]
0x61b: IF (Stack[-1] == 0) GOTO 0x61e; Pop(1)

0x61c: Stack[-10] = (int) 4294967294
0x61d: Return(8)

0x61e: @ CreateDialog(Stack[-4])
0x61f: Pop(0)
0x620: PushEmpty(int)
0x621: Call 0xa9d

0x622: Pop(0)
0x623: @@ SetNPCName(Stack[-1])
0x624: Pop(1)
0x625: PushEmpty(string)
0x626: Call 0xa9f

0x627: Pop(0)
0x628: @@ SetPhoto(Stack[-1])
0x629: Pop(1)
0x62a: PushEmpty(int)
0x62b: Call 0xa38

0x62c: Pop(0)
0x62d: @@ SetPlayerName(Stack[-1])
0x62e: Pop(1)
0x62f: Stack[-2] = (int) 4294967295
0x630: @ IsOverrideActive(Stack[-3])
0x631: Pop(0)
0x632: Push(Stack[-3])
0x633: IF (Stack[-1] == 0) GOTO 0x636; Pop(1)

0x634: Stack[-10] = (int) 4294967294
0x635: Return(8)

0x636: @ DoDialog(Stack[-4])
0x637: Pop(0)
0x638: PushEmpty(object, object)
0x639: Stack[-2] = Stack[-11]
0x63a: Stack[-1] = Stack[-6]
0x63b: TaskCall 8

0x63c: Call 0x653

0x63d: TaskReturn

0x63e: Pop(2)
0x63f: @@ IsDialogEnd(Stack[-1])
0x640: Pop(0)
0x641: Stack[-1] = !Stack[-1]
0x642: IF (Stack[-1] == 0) GOTO 0x648; Pop(1)

0x643: @ sync()
0x644: Pop(0)
0x645: @@ IsDialogEnd(Stack[-1])
0x646: Pop(0)
0x647: GOTO 0x641

0x648: PushEmpty(object)
0x649: Stack[-1] = Stack[-10]
0x64a: Call 0x8d5

0x64b: Pop(1)
0x64c: @ StopDialog(Stack[-4])
0x64d: Pop(0)
0x64e: @@ GetReturnValue(Stack[-2])
0x64f: Pop(0)
0x650: Stack[-10] = Stack[-2]
0x651: Return(8)

0x652: Stack[-4] = 0
0x653: PushEmpty()
0x654: Stack[0 + Tasks[-1].StackPointer] = Stack[-1]
0x655: Stack[1 + Tasks[-1].StackPointer] = Stack[-2]
0x656: Stack[3 + Tasks[-1].StackPointer] = (bool)0
0x657: Push((int) 1)
0x658: IF (Stack[-1] == 0) GOTO 0x6a1; Pop(1)

0x659: PushEmpty(string)
0x65a: Stack[-1] = "Neutral"
0x65b: Call 0x6bf

0x65c: Pop(1)
0x65d: Push((int) 13794)
0x65e: @@ SetMessage(Stack[-1])
0x65f: Pop(1)
0x660: @@ ClearReplies()
0x661: Pop(0)
0x662: Push((int) 13795)
0x663: Push((int) 4294967295)
0x664: Push((int) 15021)
0x665: @@ AddReply(Stack[-3], Stack[-2], Stack[-1])
0x666: Pop(3)
0x667: Push((int) 13796)
0x668: Push((int) 4294967295)
0x669: Push((int) 15022)
0x66a: @@ AddReply(Stack[-3], Stack[-2], Stack[-1])
0x66b: Pop(3)
0x66c: GOTO 0x6a1

0x66d: PushEmpty(string)
0x66e: Stack[-1] = "Neutral"
0x66f: Call 0x6bf

0x670: Pop(1)
0x671: Push((int) 14699)
0x672: @@ SetMessage(Stack[-1])
0x673: Pop(1)
0x674: @@ ClearReplies()
0x675: Pop(0)
0x676: PushEmpty(bool, object)
0x677: Stack[-1] = Stack[1 + Tasks[-1].StackPointer]
0x678: Call 0xa2c

0x679: Pop(1)
0x67a: IF (Stack[-1] == 0) GOTO 0x680; Pop(1)

0x67b: Push((int) 14700)
0x67c: Push((int) 15941)
0x67d: Push((int) 15940)
0x67e: @@ AddReply(Stack[-3], Stack[-2], Stack[-1])
0x67f: Pop(3)
0x680: Push((int) 14707)
0x681: Push((int) 4294967295)
0x682: Push((int) 15948)
0x683: @@ AddReply(Stack[-3], Stack[-2], Stack[-1])
0x684: Pop(3)
0x685: GOTO 0x6a1

0x686: PushEmpty(string)
0x687: Stack[-1] = "Neutral"
0x688: Call 0x6bf

0x689: Pop(1)
0x68a: Push((int) 14708)
0x68b: @@ SetMessage(Stack[-1])
0x68c: Pop(1)
0x68d: @@ ClearReplies()
0x68e: Pop(0)
0x68f: Push((int) 14709)
0x690: Push((int) 15951)
0x691: Push((int) 15950)
0x692: @@ AddReply(Stack[-3], Stack[-2], Stack[-1])
0x693: Pop(3)
0x694: Push((int) 14720)
0x695: Push((int) 4294967295)
0x696: Push((int) 15963)
0x697: @@ AddReply(Stack[-3], Stack[-2], Stack[-1])
0x698: Pop(3)
0x699: Push((int) 14719)
0x69a: Push((int) 4294967295)
0x69b: Push((int) 15962)
0x69c: @@ AddReply(Stack[-3], Stack[-2], Stack[-1])
0x69d: Pop(3)
0x69e: GOTO 0x6a1

0x69f: Return(0)

0x6a0: GOTO 0x657

0x6a1: PushEmpty(bool)
0x6a2: Call 0xaa1

0x6a3: Pop(0)
0x6a4: IF (Stack[-1] == 0) GOTO 0x6b0; Pop(1)

0x6a5: @ lshWaitForAnimEnd()
0x6a6: Pop(0)
0x6a7: Push( Stack[3 + Tasks[-1].StackPointer] )
0x6a8: IF (Stack[-1] == 0) GOTO 0x6aa; Pop(1)

0x6a9: GOTO 0x6af

0x6aa: PushEmpty(string)
0x6ab: Stack[-1] = Stack[2 + Tasks[-1].StackPointer]
0x6ac: Call 0x90d

0x6ad: Pop(1)
0x6ae: GOTO 0x6a5

0x6af: GOTO 0x6be

0x6b0: Push("all")
0x6b1: Push("idle")
0x6b2: @ PlayAnimation(Stack[-2], Stack[-1])
0x6b3: Pop(2)
0x6b4: @ WaitForAnimEnd()
0x6b5: Pop(0)
0x6b6: Push( Stack[3 + Tasks[-1].StackPointer] )
0x6b7: IF (Stack[-1] == 0) GOTO 0x6b9; Pop(1)

0x6b8: GOTO 0x6be

0x6b9: Push("all")
0x6ba: Push("idle")
0x6bb: @ PlayAnimation(Stack[-2], Stack[-1])
0x6bc: Pop(2)
0x6bd: GOTO 0x6b4

0x6be: Return(0)

0x6bf: PushEmpty()
0x6c0: PushEmpty(bool)
0x6c1: Call 0xaa1

0x6c2: Pop(0)
0x6c3: Stack[-1] = !Stack[-1]
0x6c4: IF (Stack[-1] == 0) GOTO 0x6c6; Pop(1)

0x6c5: Return(0)

0x6c6: Pop(0); Push((bool) Stack[-1] == Stack[2 + Tasks[-1].StackPointer])
0x6c7: IF (Stack[-1] == 0) GOTO 0x6c9; Pop(1)

0x6c8: Return(0)

0x6c9: PushEmpty(string)
0x6ca: Stack[-1] = Stack[-2]
0x6cb: Call 0x90d

0x6cc: Pop(1)
0x6cd: Stack[2 + Tasks[-1].StackPointer] = Stack[-1]
0x6ce: Return(0)

0x6cf: PushEmpty()
0x6d0: Push((int) 1)
0x6d1: IF (Stack[-1] == 0) GOTO 0x7a5; Pop(1)

0x6d2: PushEmpty()
0x6d3: Call 0x92a

0x6d4: Pop(0)
0x6d5: Push((int) 15021)
0x6d6: Pop(1); Push((bool) Stack[-2] == Stack[-1])
0x6d7: IF (Stack[-1] == 0) GOTO 0x6dd; Pop(1)

0x6d8: PushEmpty(object, object)
0x6d9: Stack[-2] = Stack[1 + Tasks[-1].StackPointer]
0x6da: Stack[-1] = Stack[0 + Tasks[-1].StackPointer]
0x6db: Call 0xa27

0x6dc: Pop(2)
0x6dd: Push((int) 15020)
0x6de: Pop(1); Push((bool) Stack[-3] == Stack[-1])
0x6df: IF (Stack[-1] == 0) GOTO 0x726; Pop(1)

0x6e0: PushEmpty(string)
0x6e1: Stack[-1] = "Neutral"
0x6e2: Call 0x6bf

0x6e3: Pop(1)
0x6e4: Push((int) 13794)
0x6e5: @@ SetMessage(Stack[-1])
0x6e6: Pop(1)
0x6e7: @@ ClearReplies()
0x6e8: Pop(0)
0x6e9: Push((int) 13795)
0x6ea: Push((int) 4294967295)
0x6eb: Push((int) 15021)
0x6ec: @@ AddReply(Stack[-3], Stack[-2], Stack[-1])
0x6ed: Pop(3)
0x6ee: Push((int) 13796)
0x6ef: Push((int) 4294967295)
0x6f0: Push((int) 15022)
0x6f1: @@ AddReply(Stack[-3], Stack[-2], Stack[-1])
0x6f2: Pop(3)
0x6f3: Return(0)

0x6f4: PushEmpty(string)
0x6f5: Stack[-1] = "Neutral"
0x6f6: Call 0x6bf

0x6f7: Pop(1)
0x6f8: Push((int) 14699)
0x6f9: @@ SetMessage(Stack[-1])
0x6fa: Pop(1)
0x6fb: @@ ClearReplies()
0x6fc: Pop(0)
0x6fd: PushEmpty(bool, object)
0x6fe: Stack[-1] = Stack[1 + Tasks[-1].StackPointer]
0x6ff: Call 0xa2c

0x700: Pop(1)
0x701: IF (Stack[-1] == 0) GOTO 0x707; Pop(1)

0x702: Push((int) 14700)
0x703: Push((int) 15941)
0x704: Push((int) 15940)
0x705: @@ AddReply(Stack[-3], Stack[-2], Stack[-1])
0x706: Pop(3)
0x707: Push((int) 14707)
0x708: Push((int) 4294967295)
0x709: Push((int) 15948)
0x70a: @@ AddReply(Stack[-3], Stack[-2], Stack[-1])
0x70b: Pop(3)
0x70c: Return(0)

0x70d: PushEmpty(string)
0x70e: Stack[-1] = "Neutral"
0x70f: Call 0x6bf

0x710: Pop(1)
0x711: Push((int) 14708)
0x712: @@ SetMessage(Stack[-1])
0x713: Pop(1)
0x714: @@ ClearReplies()
0x715: Pop(0)
0x716: Push((int) 14709)
0x717: Push((int) 15951)
0x718: Push((int) 15950)
0x719: @@ AddReply(Stack[-3], Stack[-2], Stack[-1])
0x71a: Pop(3)
0x71b: Push((int) 14720)
0x71c: Push((int) 4294967295)
0x71d: Push((int) 15963)
0x71e: @@ AddReply(Stack[-3], Stack[-2], Stack[-1])
0x71f: Pop(3)
0x720: Push((int) 14719)
0x721: Push((int) 4294967295)
0x722: Push((int) 15962)
0x723: @@ AddReply(Stack[-3], Stack[-2], Stack[-1])
0x724: Pop(3)
0x725: Return(0)

0x726: Push((int) 15951)
0x727: Pop(1); Push((bool) Stack[-3] == Stack[-1])
0x728: IF (Stack[-1] == 0) GOTO 0x73d; Pop(1)

0x729: PushEmpty(string)
0x72a: Stack[-1] = "Neutral"
0x72b: Call 0x6bf

0x72c: Pop(1)
0x72d: Push((int) 14710)
0x72e: @@ SetMessage(Stack[-1])
0x72f: Pop(1)
0x730: @@ ClearReplies()
0x731: Pop(0)
0x732: Push((int) 14711)
0x733: Push((int) 15953)
0x734: Push((int) 15952)
0x735: @@ AddReply(Stack[-3], Stack[-2], Stack[-1])
0x736: Pop(3)
0x737: Push((int) 14718)
0x738: Push((int) 15955)
0x739: Push((int) 15960)
0x73a: @@ AddReply(Stack[-3], Stack[-2], Stack[-1])
0x73b: Pop(3)
0x73c: Return(0)

0x73d: Push((int) 15953)
0x73e: Pop(1); Push((bool) Stack[-3] == Stack[-1])
0x73f: IF (Stack[-1] == 0) GOTO 0x754; Pop(1)

0x740: PushEmpty(string)
0x741: Stack[-1] = "Neutral"
0x742: Call 0x6bf

0x743: Pop(1)
0x744: Push((int) 14712)
0x745: @@ SetMessage(Stack[-1])
0x746: Pop(1)
0x747: @@ ClearReplies()
0x748: Pop(0)
0x749: Push((int) 14713)
0x74a: Push((int) 15955)
0x74b: Push((int) 15954)
0x74c: @@ AddReply(Stack[-3], Stack[-2], Stack[-1])
0x74d: Pop(3)
0x74e: Push((int) 14717)
0x74f: Push((int) 15955)
0x750: Push((int) 15958)
0x751: @@ AddReply(Stack[-3], Stack[-2], Stack[-1])
0x752: Pop(3)
0x753: Return(0)

0x754: Push((int) 15955)
0x755: Pop(1); Push((bool) Stack[-3] == Stack[-1])
0x756: IF (Stack[-1] == 0) GOTO 0x76b; Pop(1)

0x757: PushEmpty(string)
0x758: Stack[-1] = "Neutral"
0x759: Call 0x6bf

0x75a: Pop(1)
0x75b: Push((int) 14714)
0x75c: @@ SetMessage(Stack[-1])
0x75d: Pop(1)
0x75e: @@ ClearReplies()
0x75f: Pop(0)
0x760: Push((int) 14715)
0x761: Push((int) 4294967295)
0x762: Push((int) 15956)
0x763: @@ AddReply(Stack[-3], Stack[-2], Stack[-1])
0x764: Pop(3)
0x765: Push((int) 14716)
0x766: Push((int) 4294967295)
0x767: Push((int) 15957)
0x768: @@ AddReply(Stack[-3], Stack[-2], Stack[-1])
0x769: Pop(3)
0x76a: Return(0)

0x76b: Push((int) 15941)
0x76c: Pop(1); Push((bool) Stack[-3] == Stack[-1])
0x76d: IF (Stack[-1] == 0) GOTO 0x782; Pop(1)

0x76e: PushEmpty(string)
0x76f: Stack[-1] = "Neutral"
0x770: Call 0x6bf

0x771: Pop(1)
0x772: Push((int) 14701)
0x773: @@ SetMessage(Stack[-1])
0x774: Pop(1)
0x775: @@ ClearReplies()
0x776: Pop(0)
0x777: Push((int) 14702)
0x778: Push((int) 15943)
0x779: Push((int) 15942)
0x77a: @@ AddReply(Stack[-3], Stack[-2], Stack[-1])
0x77b: Pop(3)
0x77c: Push((int) 14706)
0x77d: Push((int) 15943)
0x77e: Push((int) 15946)
0x77f: @@ AddReply(Stack[-3], Stack[-2], Stack[-1])
0x780: Pop(3)
0x781: Return(0)

0x782: Push((int) 15943)
0x783: Pop(1); Push((bool) Stack[-3] == Stack[-1])
0x784: IF (Stack[-1] == 0) GOTO 0x799; Pop(1)

0x785: PushEmpty(string)
0x786: Stack[-1] = "Neutral"
0x787: Call 0x6bf

0x788: Pop(1)
0x789: Push((int) 14703)
0x78a: @@ SetMessage(Stack[-1])
0x78b: Pop(1)
0x78c: @@ ClearReplies()
0x78d: Pop(0)
0x78e: Push((int) 14705)
0x78f: Push((int) 4294967295)
0x790: Push((int) 15945)
0x791: @@ AddReply(Stack[-3], Stack[-2], Stack[-1])
0x792: Pop(3)
0x793: Push((int) 14704)
0x794: Push((int) 4294967295)
0x795: Push((int) 15944)
0x796: @@ AddReply(Stack[-3], Stack[-2], Stack[-1])
0x797: Pop(3)
0x798: Return(0)

0x799: Stack[3 + Tasks[-1].StackPointer] = (bool)1
0x79a: PushEmpty(bool)
0x79b: Call 0xaa1

0x79c: Pop(0)
0x79d: IF (Stack[-1] == 0) GOTO 0x7a1; Pop(1)

0x79e: @ lshStopAnimation()
0x79f: Pop(0)
0x7a0: GOTO 0x7a3

0x7a1: @ StopAnimation()
0x7a2: Pop(0)
0x7a3: Return(0)

0x7a4: GOTO 0x6d0

0x7a5: Return(0)

0x7a6: PushEmpty()
0x7a7: Push((int) 1)
0x7a8: Pop(1); Push((bool) Stack[-2] == Stack[-1])
0x7a9: IF (Stack[-1] == 0) GOTO 0x7ac; Pop(1)

0x7aa: Stack[-2] = "fire"
0x7ab: Return(0)

0x7ac: Stack[-2] = "phys"
0x7ad: Return(0)

0x7ae: PushEmpty(cvector, cvector, cvector, cvector)
0x7af: @ GetPosition(Stack[-2])
0x7b0: Pop(0)
0x7b1: @@ GetPosition(Stack[-1])
0x7b2: Pop(0)
0x7b3: Stack[-6] = Stack[-1] - Stack[-2] 
0x7b4: Return(4)

0x7b5: PushEmpty(cvector, cvector, cvector, cvector, cvector, cvector)
0x7b6: @ GetPosition(Stack[-3])
0x7b7: Pop(0)
0x7b8: @@ GetPosition(Stack[-2])
0x7b9: Pop(0)
0x7ba: Stack[-1] = Stack[-2] - Stack[-3] 
0x7bb: Stack[-8] = Stack[-1] | Stack[-1] 
0x7bc: Return(6)

0x7bd: PushEmpty(bool, bool)
0x7be: Push("HasProperty")
0x7bf: Push((int) 2)
0x7c0: FuncExist 1 = 6, 2 (TaskVar=2)
0x7c1: Stack[-1] = !Stack[-1]
0x7c2: IF (Stack[-1] == 0) GOTO 0x7c5; Pop(1)

0x7c3: Stack[-5] = (bool) 0
0x7c4: Return(2)

0x7c5: @@ HasProperty(Stack[-3], Stack[-1])
0x7c6: Pop(0)
0x7c7: Stack[-5] = Stack[-1]
0x7c8: Return(2)

0x7c9: PushEmpty(int, string, int, float, float, float, int, string, int, float, float, float)
0x7ca: PushEmpty(bool, object, string)
0x7cb: Stack[-2] = Stack[-18]
0x7cc: Stack[-1] = "health"
0x7cd: Call 0x7bd

0x7ce: Pop(2)
0x7cf: Stack[-1] = !Stack[-1]
0x7d0: IF (Stack[-1] == 0) GOTO 0x7d3; Pop(1)

0x7d1: Stack[-16] = (float) 0.0
0x7d2: Return(12)

0x7d3: PushEmpty(bool, object, string)
0x7d4: Stack[-2] = Stack[-18]
0x7d5: Stack[-1] = "armor"
0x7d6: Call 0x7bd

0x7d7: Pop(2)
0x7d8: Stack[-1] = !Stack[-1]
0x7d9: IF (Stack[-1] == 0) GOTO 0x7dc; Pop(1)

0x7da: Stack[-6] = (int) 0
0x7db: GOTO 0x7df

0x7dc: Push("armor")
0x7dd: @@ GetProperty(Stack[-1], Stack[-7])
0x7de: Pop(1)
0x7df: Push("armor_")
0x7e0: PushEmpty(string, int)
0x7e1: Stack[-1] = Stack[-16]
0x7e2: Call 0x7a6

0x7e3: Pop(1)
0x7e4: Stack[-7] = Stack[-2] + Stack[-1] 
0x7e5: PushEmpty(bool, object, string)
0x7e6: Stack[-2] = Stack[-18]
0x7e7: Stack[-1] = Stack[-8]
0x7e8: Call 0x7bd

0x7e9: Pop(2)
0x7ea: Stack[-1] = !Stack[-1]
0x7eb: IF (Stack[-1] == 0) GOTO 0x7ee; Pop(1)

0x7ec: Stack[-4] = (int) 0
0x7ed: GOTO 0x7f0

0x7ee: @@ GetProperty(Stack[-5], Stack[-4])
0x7ef: Pop(0)
0x7f0: PushEmpty(float, float, float)
0x7f1: Stack[-9] += Stack[-7]
0x7f2: Push((float)100.0)
0x7f3: Stack[-4] = Stack[-2] / Stack[-1] 
0x7f4: Stack[-1] = (int) 1
0x7f5: Call 0x93b

0x7f6: Stack[-6] = Stack[-3]
0x7f7: Pop(3)
0x7f8: Push("health")
0x7f9: @@ GetProperty(Stack[-1], Stack[-3])
0x7fa: Pop(1)
0x7fb: Push((int) 1)
0x7fc: Stack[-1] -= Stack[-4]
0x7fd: Stack[-2] = Stack[-15] * Stack[-1] 
0x7fe: Push("health")
0x7ff: PushEmpty(float, float, float, float)
0x800: Stack[-3] = Stack[-7] - Stack[-6] 
0x801: Stack[-2] = (int) 0
0x802: Stack[-1] = (int) 1
0x803: Call 0x942

0x804: Pop(3)
0x805: @@ SetProperty(Stack[-2], Stack[-1])
0x806: Pop(2)
0x807: Stack[-16] = Stack[-1]
0x808: Return(12)

0x809: PushEmpty(bool, bool)
0x80a: @@ IsDead(Stack[-1])
0x80b: Pop(0)
0x80c: Stack[-4] = Stack[-1]
0x80d: Return(2)

0x80e: PushEmpty(object, object, object, object)
0x80f: Pop(0); Push((bool) Stack[-5] == 0)
0x810: IF (Stack[-1] == 0) GOTO 0x813; Pop(1)

0x811: Stack[-6] = (bool) 0
0x812: Return(4)

0x813: PushEmpty(bool)
0x814: Stack[-1] = (bool) 0
0x815: Push("IsDead")
0x816: Push((int) 1)
0x817: FuncExist 1 = 8, 2 (TaskVar=2)
0x818: IF (Stack[-1] == 0) GOTO 0x81f; Pop(1)

0x819: PushEmpty(bool, object)
0x81a: Stack[-1] = Stack[-8]
0x81b: Call 0x809

0x81c: Pop(1)
0x81d: IF (Stack[-1] == 0) GOTO 0x81f; Pop(1)

0x81e: Stack[-1] = (bool) 1
0x81f: IF (Stack[-1] == 0) GOTO 0x822; Pop(1)

0x820: Stack[-6] = (bool) 0
0x821: Return(4)

0x822: @ GetScene(Stack[-2])
0x823: Pop(0)
0x824: Pop(0); Push((bool) Stack[-2] == 0)
0x825: IF (Stack[-1] == 0) GOTO 0x828; Pop(1)

0x826: Stack[-6] = (bool) 0
0x827: Return(4)

0x828: @@ GetScene(Stack[-1])
0x829: Pop(0)
0x82a: Pop(0); Push((bool) Stack[-2] != Stack[-1])
0x82b: IF (Stack[-1] == 0) GOTO 0x82e; Pop(1)

0x82c: Stack[-6] = (bool) 0
0x82d: Return(4)

0x82e: Stack[-6] = (bool) 1
0x82f: Return(4)

0x830: Stack[-1] = 0
0x831: Stack[-2] = 0
0x832: PushEmpty(int, int)
0x833: PushEmpty(bool, object)
0x834: Stack[-1] = Stack[-5]
0x835: Call 0x80e

0x836: Pop(1)
0x837: Stack[-1] = !Stack[-1]
0x838: IF (Stack[-1] == 0) GOTO 0x83b; Pop(1)

0x839: Stack[-4] = (bool) 0
0x83a: Return(2)

0x83b: PushEmpty(bool, object, string)
0x83c: Stack[-2] = Stack[-6]
0x83d: Stack[-1] = "noaccess"
0x83e: Call 0x7bd

0x83f: Pop(2)
0x840: Stack[-1] = !Stack[-1]
0x841: IF (Stack[-1] == 0) GOTO 0x844; Pop(1)

0x842: Stack[-4] = (bool) 1
0x843: Return(2)

0x844: Push("noaccess")
0x845: @@ GetProperty(Stack[-1], Stack[-2])
0x846: Pop(1)
0x847: Push((int) 0)
0x848: Stack[-5] = (bool) Stack[-2] == Stack[-1]); Pop(1)
0x849: Return(2)

0x84a: PushEmpty(object, object, cvector, float, int, cvector, cvector, cvector, cvector, string, object, object, cvector, float, int, cvector, cvector, cvector, cvector, string)
0x84b: PushEmpty(bool)
0x84c: Stack[-1] = (bool) 0
0x84d: Push((int) 4)
0x84e: Pop(1); Push((bool) Stack[-24] != Stack[-1])
0x84f: IF (Stack[-1] == 0) GOTO 0x854; Pop(1)

0x850: Push((int) 5)
0x851: Pop(1); Push((bool) Stack[-24] != Stack[-1])
0x852: IF (Stack[-1] == 0) GOTO 0x854; Pop(1)

0x853: Stack[-1] = (bool) 1
0x854: IF (Stack[-1] == 0) GOTO 0x867; Pop(1)

0x855: @ GetScene(Stack[-10])
0x856: Pop(0)
0x857: @ GetPosition(Stack[-8])
0x858: Pop(0)
0x859: @ GetEyesHeight(Stack[-7])
0x85a: Pop(0)
0x85b: Push(CVariableVector(Stack[-8], 256))
0x85c: Push((int) 2)
0x85d: Stack[-9] /= Stack[-1]
0x85e: Stack[-2] = Stack[-2] + Stack[-1] 
0x85f: Stack[-1] = Stack[Stack[-9] * 4 + 1]
0x860: Push("scripted")
0x861: Push(CVector(0.0, 0.0, 1.0))
0x862: Push("blood.xml")
0x863: @ AddActorByType(Stack[-12], Stack[-3], Stack[-13], Stack[-11], Stack[-2], Stack[-1])
0x864: Pop(3)
0x865: Stack[-9] = 0
0x866: Stack[-10] = 0
0x867: Pop(0); Push((bool) Stack[-23] == 0)
0x868: IF (Stack[-1] == 0) GOTO 0x86a; Pop(1)

0x869: Return(20)

0x86a: @ GetSecondaryAnimationType(Stack[-6])
0x86b: Pop(0)
0x86c: Push((int) 0)
0x86d: Pop(1); Push((bool) Stack[-7] < Stack[-1])
0x86e: IF (Stack[-1] == 0) GOTO 0x870; Pop(1)

0x86f: Return(20)

0x870: @@ GetPosition(Stack[-5])
0x871: Pop(0)
0x872: @ GetPosition(Stack[-4])
0x873: Pop(0)
0x874: @ GetDirection(Stack[-3])
0x875: Pop(0)
0x876: Stack[-2] = Stack[-4] - Stack[-5] 
0x877: Push(CVariableVector(Stack[-2], 0))
0x878: Push(CVariableVector(Stack[-4], 0))
0x879: Stack[-2] *= Stack[-1]
0x87a: Push(CVariableVector(Stack[-3], 512))
0x87b: Push(CVariableVector(Stack[-5], 512))
0x87c: Stack[-2] *= Stack[-1]
0x87d: Stack[-2] += Stack[-1]
0x87e: Push((int) 0)
0x87f: Pop(2); Push((bool) Stack[-2] >= Stack[-1])
0x880: IF (Stack[-1] == 0) GOTO 0x883; Pop(1)

0x881: Stack[-1] = "fhit"
0x882: GOTO 0x884

0x883: Stack[-1] = "bhit"
0x884: Push("hit_react")
0x885: Push("1")
0x886: Stack[-3] += Stack[-1]
0x887: Push("2")
0x888: Stack[-4] += Stack[-1]
0x889: Push((int) 4294967286)
0x88a: @ FadeSecondaryAnimation(Stack[-4], Stack[-3], Stack[-2], Stack[-1])
0x88b: Pop(4)
0x88c: Return(20)

0x88d: PushEmpty(cvector, cvector, cvector, cvector, cvector, cvector)
0x88e: @@ GetPosition(Stack[-3])
0x88f: Pop(0)
0x890: @ GetPosition(Stack[-2])
0x891: Pop(0)
0x892: Stack[-1] = Stack[-3] - Stack[-2] 
0x893: Push(CVariableVector(Stack[-1], 0))
0x894: Push(CVariableVector(Stack[-2], 512))
0x895: @ RotateAsync(Stack[-2], Stack[-1])
0x896: Pop(2)
0x897: Return(6)

0x898: PushEmpty(bool, bool)
0x899: @ IsLoaded(Stack[-1])
0x89a: Pop(0)
0x89b: Stack[-3] = Stack[-1]
0x89c: Return(2)

0x89d: PushEmpty(float, cvector, cvector, cvector, cvector, cvector, cvector, bool, float, cvector, cvector, cvector, cvector, cvector, cvector, bool)
0x89e: @@ GetPosition(Stack[-7])
0x89f: Pop(0)
0x8a0: @@ GetEyesHeight(Stack[-8])
0x8a1: Pop(0)
0x8a2: Push(CVariableVector(Stack[-7], 256))
0x8a3: Stack[-1] = Stack[-1] + Stack[-9] 
0x8a4: Stack[-1] = Stack[Stack[-8] * 4 + 1]
0x8a5: @ GetPosition(Stack[-6])
0x8a6: Pop(0)
0x8a7: @ GetEyesHeight(Stack[-8])
0x8a8: Pop(0)
0x8a9: Push(CVariableVector(Stack[-6], 256))
0x8aa: Stack[-1] = Stack[-1] + Stack[-9] 
0x8ab: Stack[-1] = Stack[Stack[-7] * 4 + 1]
0x8ac: Stack[-5] = Stack[-7] - Stack[-6] 
0x8ad: Push(CVariableVector(Stack[-5], 256))
0x8ae: Stack[-1] = (int) 0
0x8af: Stack[-1] = Stack[Stack[-6] * 4 + 1]
0x8b0: Stack[-5] |= Stack[-5]
0x8b1: Stack[-1] = Sqrt(Stack[-1])
0x8b2: Stack[-6] = Stack[-6] / Stack[-1] 
0x8b3: Stack[-4] = -Stack[-5])
0x8b4: Push((int) 70)
0x8b5: Stack[-6] *= Stack[-1]
0x8b6: PushEmpty(cvector, cvector)
0x8b7: Push(CVector(0.0, 1.0, 0.0))
0x8b8: Stack[-2] = Stack[-8] ^ Stack[-1] 
0x8b9: Call 0x931

0x8ba: Pop(1)
0x8bb: Push((int) 25)
0x8bc: Stack[-2] *= Stack[-1]
0x8bd: Stack[-2] += Stack[-1]
0x8be: Push(CVector(0.0, 10.0, 0.0))
0x8bf: Stack[-5] = Stack[-2] - Stack[-1] 
0x8c0: Stack[-2] = Stack[-6] + Stack[-3] 
0x8c1: @ IsOverrideActive(Stack[-1])
0x8c2: Pop(0)
0x8c3: Push(Stack[-1])
0x8c4: IF (Stack[-1] == 0) GOTO 0x8c7; Pop(1)

0x8c5: Stack[-18] = (bool) 0
0x8c6: Return(16)

0x8c7: @ StopWorld()
0x8c8: Pop(0)
0x8c9: @ CameraTransit(Stack[-2], Stack[-4])
0x8ca: Pop(0)
0x8cb: Push(CVariableVector(Stack[-3], 0))
0x8cc: Push(CVariableVector(Stack[-4], 512))
0x8cd: @ Rotate(Stack[-2], Stack[-1])
0x8ce: Pop(2)
0x8cf: @ CameraWaitForPlayFinish()
0x8d0: Pop(0)
0x8d1: @ ResumeWorld()
0x8d2: Pop(0)
0x8d3: Stack[-18] = (bool) 1
0x8d4: Return(16)

0x8d5: PushEmpty()
0x8d6: @ CameraSwitchToNormal()
0x8d7: Pop(0)
0x8d8: Return(0)

0x8d9: PushEmpty(float, cvector, cvector, cvector, cvector, cvector, cvector, bool, float, cvector, cvector, cvector, cvector, cvector, cvector, bool)
0x8da: @@ GetPosition(Stack[-7])
0x8db: Pop(0)
0x8dc: @@ GetEyesHeight(Stack[-8])
0x8dd: Pop(0)
0x8de: Push(CVariableVector(Stack[-7], 256))
0x8df: Stack[-1] = Stack[-1] + Stack[-9] 
0x8e0: Stack[-1] = Stack[Stack[-8] * 4 + 1]
0x8e1: @ GetPosition(Stack[-6])
0x8e2: Pop(0)
0x8e3: @ GetEyesHeight(Stack[-8])
0x8e4: Pop(0)
0x8e5: Push(CVariableVector(Stack[-6], 256))
0x8e6: Stack[-1] = Stack[-1] + Stack[-9] 
0x8e7: Stack[-1] = Stack[Stack[-7] * 4 + 1]
0x8e8: Stack[-5] = Stack[-7] - Stack[-6] 
0x8e9: Push(CVariableVector(Stack[-5], 256))
0x8ea: Stack[-1] = (int) 0
0x8eb: Stack[-1] = Stack[Stack[-6] * 4 + 1]
0x8ec: Stack[-5] |= Stack[-5]
0x8ed: Stack[-1] = Sqrt(Stack[-1])
0x8ee: Stack[-6] = Stack[-6] / Stack[-1] 
0x8ef: Stack[-4] = -Stack[-5])
0x8f0: Push((int) 70)
0x8f1: Stack[-6] *= Stack[-1]
0x8f2: Push(CVector(0.0, 10.0, 0.0))
0x8f3: Stack[-5] = Stack[-2] - Stack[-1] 
0x8f4: Stack[-2] = Stack[-6] + Stack[-3] 
0x8f5: @ IsOverrideActive(Stack[-1])
0x8f6: Pop(0)
0x8f7: Push(Stack[-1])
0x8f8: IF (Stack[-1] == 0) GOTO 0x8fb; Pop(1)

0x8f9: Stack[-18] = (bool) 0
0x8fa: Return(16)

0x8fb: @ StopWorld()
0x8fc: Pop(0)
0x8fd: @ CameraTransit(Stack[-2], Stack[-4])
0x8fe: Pop(0)
0x8ff: Push(CVariableVector(Stack[-3], 0))
0x900: Push(CVariableVector(Stack[-4], 512))
0x901: @ Rotate(Stack[-2], Stack[-1])
0x902: Pop(2)
0x903: @ CameraWaitForPlayFinish()
0x904: Pop(0)
0x905: @ ResumeWorld()
0x906: Pop(0)
0x907: Stack[-18] = (bool) 1
0x908: Return(16)

0x909: PushEmpty()
0x90a: @ CameraSwitchToNormal()
0x90b: Pop(0)
0x90c: Return(0)

0x90d: PushEmpty(float, float, float, float)
0x90e: Push("playing ")
0x90f: Stack[-1] += Stack[-6]
0x910: @ Trace(Stack[-1])
0x911: Pop(1)
0x912: @ lshGetAnimTimes(Stack[-5], Stack[-2], Stack[-1])
0x913: Pop(0)
0x914: @ lshPlayAnimation(Stack[-2], Stack[-1])
0x915: Pop(0)
0x916: Push("start: ")
0x917: Stack[-1] += Stack[-3]
0x918: @ Trace(Stack[-1])
0x919: Pop(1)
0x91a: Push("end: ")
0x91b: Stack[-1] += Stack[-2]
0x91c: @ Trace(Stack[-1])
0x91d: Pop(1)
0x91e: Return(4)

0x91f: PushEmpty(float, cvector, float, cvector)
0x920: @@ GetEyesHeight(Stack[-2])
0x921: Pop(0)
0x922: Stack[-1] = CVector(0.0, 0.0, 0.0)
0x923: Push(CVariableVector(Stack[-1], 256))
0x924: Stack[-1] = Stack[-3]
0x925: Stack[-1] = Stack[Stack[-2] * 4 + 1]
0x926: Push("head")
0x927: @ LookAsync(Stack[-6], Stack[-1], Stack[-2])
0x928: Pop(1)
0x929: Return(4)

0x92a: PushEmpty(bool)
0x92b: Call 0xaa1

0x92c: Pop(0)
0x92d: IF (Stack[-1] == 0) GOTO 0x930; Pop(1)

0x92e: @ lshStopSpeech()
0x92f: Pop(0)
0x930: Return(0)

0x931: PushEmpty(float, float)
0x932: Stack[-3] |= Stack[-3]
0x933: Stack[-2] = Sqrt(Stack[-1])
0x934: Push((float)0.0)
0x935: Pop(1); Push((bool) Stack[-2] < Stack[-1])
0x936: IF (Stack[-1] == 0) GOTO 0x939; Pop(1)

0x937: Stack[-4] = CVector(0.0, 0.0, 0.0)
0x938: Return(2)

0x939: Stack[-4] = Stack[-3] / Stack[-1] 
0x93a: Return(2)

0x93b: PushEmpty()
0x93c: Pop(0); Push((bool) Stack[-2] < Stack[-1])
0x93d: IF (Stack[-1] == 0) GOTO 0x940; Pop(1)

0x93e: Stack[-3] = Stack[-2]
0x93f: GOTO 0x941

0x940: Stack[-3] = Stack[-1]
0x941: Return(0)

0x942: PushEmpty()
0x943: Pop(0); Push((bool) Stack[-3] < Stack[-2])
0x944: IF (Stack[-1] == 0) GOTO 0x947; Pop(1)

0x945: Stack[-4] = Stack[-2]
0x946: Return(0)

0x947: Pop(0); Push((bool) Stack[-3] > Stack[-1])
0x948: IF (Stack[-1] == 0) GOTO 0x94b; Pop(1)

0x949: Stack[-4] = Stack[-1]
0x94a: Return(0)

0x94b: Stack[-4] = Stack[-3]
0x94c: Return(0)

0x94d: PushEmpty()
0x94e: Push(CVariableVector(Stack[-2], 0))
0x94f: Push(CVariableVector(Stack[-2], 0))
0x950: Stack[-2] *= Stack[-1]
0x951: Push(CVariableVector(Stack[-3], 512))
0x952: Push(CVariableVector(Stack[-3], 512))
0x953: Stack[-2] *= Stack[-1]
0x954: Stack[-5] = Stack[-2] + Stack[-1] 
0x955: Return(0)

0x956: PushEmpty()
0x957: Push(CVariableVector(Stack[-1], 0))
0x958: Push(CVariableVector(Stack[-2], 0))
0x959: Stack[-2] *= Stack[-1]
0x95a: Push(CVariableVector(Stack[-2], 512))
0x95b: Push(CVariableVector(Stack[-3], 512))
0x95c: Stack[-2] *= Stack[-1]
0x95d: Stack[-2] += Stack[-1]
0x95e: Stack[-3] = Sqrt(Stack[-1])
0x95f: Return(0)

0x960: PushEmpty()
0x961: PushEmpty(float, cvector, cvector)
0x962: Stack[-2] = Stack[-5]
0x963: Stack[-1] = Stack[-4]
0x964: Call 0x94d

0x965: Pop(2)
0x966: PushEmpty(float, cvector)
0x967: Stack[-1] = Stack[-5]
0x968: Call 0x956

0x969: Pop(1)
0x96a: PushEmpty(float, cvector)
0x96b: Stack[-1] = Stack[-5]
0x96c: Call 0x956

0x96d: Pop(1)
0x96e: Stack[-2] *= Stack[-1]
0x96f: Stack[-5] = Stack[-2] / Stack[-1] 
0x970: Return(0)

0x971: PushEmpty(int, int)
0x972: @ GetVariable(Stack[-3], Stack[-1])
0x973: Pop(0)
0x974: Stack[-4] = Stack[-1]
0x975: Return(2)

0x976: PushEmpty(float, float)
0x977: @ GetGameTime(Stack[-1])
0x978: Pop(0)
0x979: Push((int) 1)
0x97a: PushEmpty(int)
0x97b: Push((int) 24)
0x97c: Stack[-2] = Stack[-4] / Stack[-1] 
0x97d: Stack[-5] = Stack[-2] + Stack[-1] 
0x97e: Return(2)

0x97f: PushEmpty()
0x980: PushEmpty(object)
0x981: Stack[-1] = Stack[-2]
0x982: TaskCall 1

0x983: Call 0x16

0x984: TaskReturn

0x985: Pop(1)
0x986: Return(0)

0x987: PushEmpty(float, float)
0x988: Push("health")
0x989: Pop(1); Push((bool) Stack[-4] == Stack[-1])
0x98a: IF (Stack[-1] == 0) GOTO 0x993; Pop(1)

0x98b: Push("health")
0x98c: @ GetProperty(Stack[-1], Stack[-2])
0x98d: Pop(1)
0x98e: Push((int) 0)
0x98f: Pop(1); Push((bool) Stack[-2] <= Stack[-1])
0x990: IF (Stack[-1] == 0) GOTO 0x993; Pop(1)

0x991: @ SignalDeath(Stack[-4])
0x992: Pop(0)
0x993: Return(2)

0x994: PushEmpty()
0x995: PushEmpty(object)
0x996: Stack[-1] = Stack[-2]
0x997: Call 0x97f

0x998: Pop(1)
0x999: Return(0)

0x99a: PushEmpty()
0x99b: PushEmpty(object, int, float)
0x99c: Stack[-3] = Stack[-7]
0x99d: Stack[-2] = Stack[-6]
0x99e: Stack[-1] = Stack[-5]
0x99f: Call 0x84a

0x9a0: Pop(3)
0x9a1: Return(0)

0x9a2: PushEmpty(string, string)
0x9a3: Stack[-1] = "idle"
0x9a4: Push(Stack[-3])
0x9a5: IF (Stack[-1] == 0) GOTO 0x9a7; Pop(1)

0x9a6: Stack[-1] = Stack[-1] + Stack[-3] 
0x9a7: Stack[-4] = Stack[-1]
0x9a8: Return(2)

0x9a9: PushEmpty(int, bool, int, bool)
0x9aa: Stack[-2] = (int) 0
0x9ab: Push("all")
0x9ac: PushEmpty(string, int)
0x9ad: Stack[-1] = Stack[-5]
0x9ae: Call 0x9a2

0x9af: Pop(1)
0x9b0: @ HasAnimation(Stack[-3], Stack[-2], Stack[-1])
0x9b1: Pop(2)
0x9b2: Stack[-1] = !Stack[-1]
0x9b3: IF (Stack[-1] == 0) GOTO 0x9b5; Pop(1)

0x9b4: GOTO 0x9b8

0x9b5: Push((int) 1)
0x9b6: Stack[-3] = Stack[-3] + Stack[-1] 
0x9b7: GOTO 0x9ab

0x9b8: Stack[-5] = Stack[-2]
0x9b9: Return(4)

0x9ba: PushEmpty()
0x9bb: PushEmpty(bool)
0x9bc: Call 0xad0

0x9bd: Pop(0)
0x9be: IF (Stack[-1] == 0) GOTO 0x9c1; Pop(1)

0x9bf: Stack[-2] = (int) 2
0x9c0: GOTO 0x9c2

0x9c1: Stack[-2] = (int) 0
0x9c2: Return(0)

0x9c3: PushEmpty()
0x9c4: PushEmpty(object)
0x9c5: Stack[-1] = Stack[-2]
0x9c6: TaskCall 4

0x9c7: Call 0x29b

0x9c8: TaskReturn

0x9c9: Pop(1)
0x9ca: Return(0)

0x9cb: PushEmpty()
0x9cc: PushEmpty(bool, object)
0x9cd: Stack[-1] = Stack[-3]
0x9ce: Call 0x832

0x9cf: Pop(1)
0x9d0: IF (Stack[-1] == 0) GOTO 0x9d3; Pop(1)

0x9d1: Stack[-2] = (int) 2
0x9d2: GOTO 0x9d4

0x9d3: Stack[-2] = (int) 0
0x9d4: Return(0)

0x9d5: PushEmpty()
0x9d6: PushEmpty(object)
0x9d7: Stack[-1] = Stack[-2]
0x9d8: TaskCall 5

0x9d9: Call 0x37d

0x9da: TaskReturn

0x9db: Pop(1)
0x9dc: Return(0)

0x9dd: PushEmpty()
0x9de: PushEmpty(int, object)
0x9df: Stack[-1] = Stack[-3]
0x9e0: Call 0x9cb

0x9e1: Stack[-4] = Stack[-2]
0x9e2: Pop(2)
0x9e3: Return(0)

0x9e4: PushEmpty()
0x9e5: PushEmpty(object)
0x9e6: Stack[-1] = Stack[-2]
0x9e7: Call 0x9d5

0x9e8: Pop(1)
0x9e9: Return(0)

0x9ea: PushEmpty()
0x9eb: Stack[-2] = (int) 0
0x9ec: Return(0)

0x9ed: PushEmpty()
0x9ee: Return(0)

0x9ef: PushEmpty()
0x9f0: Push("killme")
0x9f1: Pop(1); Push((bool) Stack[-3] == Stack[-1])
0x9f2: IF (Stack[-1] == 0) GOTO 0x9f9; Pop(1)

0x9f3: PushEmpty(int, object)
0x9f4: Stack[-1] = Stack[-3]
0x9f5: Call 0xa05

0x9f6: Stack[-5] = Stack[-2]
0x9f7: Pop(2)
0x9f8: Return(0)

0x9f9: Stack[-3] = (int) 0
0x9fa: Return(0)

0x9fb: PushEmpty()
0x9fc: Push("killme")
0x9fd: Pop(1); Push((bool) Stack[-3] == Stack[-1])
0x9fe: IF (Stack[-1] == 0) GOTO 0xa04; Pop(1)

0x9ff: PushEmpty(object)
0xa00: Stack[-1] = Stack[-2]
0xa01: Call 0xa17

0xa02: Pop(1)
0xa03: Return(0)

0xa04: Return(0)

0xa05: PushEmpty()
0xa06: PushEmpty(bool, object)
0xa07: Stack[-1] = Stack[-3]
0xa08: Call 0x832

0xa09: Pop(1)
0xa0a: Stack[-1] = !Stack[-1]
0xa0b: IF (Stack[-1] == 0) GOTO 0xa0e; Pop(1)

0xa0c: Stack[-2] = (int) 0
0xa0d: Return(0)

0xa0e: PushEmpty(bool, object)
0xa0f: Stack[-1] = Stack[-3]
0xa10: Call 0xad2

0xa11: Pop(1)
0xa12: IF (Stack[-1] == 0) GOTO 0xa15; Pop(1)

0xa13: Stack[-2] = (int) 2
0xa14: GOTO 0xa16

0xa15: Stack[-2] = (int) 0
0xa16: Return(0)

0xa17: PushEmpty()
0xa18: PushEmpty(object)
0xa19: Stack[-1] = Stack[-2]
0xa1a: Call 0x9d5

0xa1b: Pop(1)
0xa1c: Return(0)

0xa1d: PushEmpty()
0xa1e: Stack[-2] = (int) 2
0xa1f: Return(0)

0xa20: PushEmpty()
0xa21: PushEmpty(object)
0xa22: Stack[-1] = Stack[-2]
0xa23: Call 0xaaa

0xa24: Pop(1)
0xa25: Return(0)

0xa26: Return(0)

0xa27: PushEmpty()
0xa28: Push((int) 1000)
0xa29: @@ SetReturnValue(Stack[-1])
0xa2a: Pop(1)
0xa2b: Return(0)

0xa2c: PushEmpty()
0xa2d: PushEmpty(int, string)
0xa2e: Stack[-1] = "KnowTvirin"
0xa2f: Call 0x971

0xa30: Pop(1)
0xa31: Push((int) 1)
0xa32: Pop(2); Push((bool) Stack[-2] == Stack[-1])
0xa33: IF (Stack[-1] == 0) GOTO 0xa36; Pop(1)

0xa34: Stack[-2] = (bool) 1
0xa35: Return(0)

0xa36: Stack[-2] = (bool) 0
0xa37: Return(0)

0xa38: PushEmpty(int, int)
0xa39: Push("player")
0xa3a: @ GetVariable(Stack[-1], Stack[-2])
0xa3b: Pop(1)
0xa3c: Push((int) 0)
0xa3d: Pop(1); Push((bool) Stack[-2] == Stack[-1])
0xa3e: IF (Stack[-1] == 0) GOTO 0xa42; Pop(1)

0xa3f: Stack[-3] = (int) 200001
0xa40: Return(2)

0xa41: GOTO 0xa47

0xa42: Push((int) 1)
0xa43: Pop(1); Push((bool) Stack[-2] == Stack[-1])
0xa44: IF (Stack[-1] == 0) GOTO 0xa47; Pop(1)

0xa45: Stack[-3] = (int) 200002
0xa46: Return(2)

0xa47: Stack[-3] = (int) 200003
0xa48: Return(2)

0xa49: PushEmpty(int, int, int, bool, int, int, int, bool)
0xa4a: Pop(0); Push((bool) Stack[-10] > Stack[-9])
0xa4b: IF (Stack[-1] == 0) GOTO 0xa50; Pop(1)

0xa4c: Push("GenerateMoney: iMin > iMax")
0xa4d: @ Trace(Stack[-1])
0xa4e: Pop(1)
0xa4f: Return(8)

0xa50: Stack[-4] = (int) 0
0xa51: Pop(0); Push((bool) Stack[-10] != Stack[-9])
0xa52: IF (Stack[-1] == 0) GOTO 0xa57; Pop(1)

0xa53: Stack[-9] -= Stack[-10]
0xa54: @ irand(Stack[-4], Stack[-1])
0xa55: Pop(1)
0xa56: GOTO 0xa5b

0xa57: Push((int) 0)
0xa58: Pop(1); Push((bool) Stack[-11] == Stack[-1])
0xa59: IF (Stack[-1] == 0) GOTO 0xa5b; Pop(1)

0xa5a: Return(8)

0xa5b: Stack[-4] = Stack[-4] + Stack[-10] 
0xa5c: Push((int) 0)
0xa5d: Pop(1); Push((bool) Stack[-5] == Stack[-1])
0xa5e: IF (Stack[-1] == 0) GOTO 0xa60; Pop(1)

0xa5f: Return(8)

0xa60: Push("Money")
0xa61: @ GetInvItemByName(Stack[-3], Stack[-1])
0xa62: Pop(1)
0xa63: Push((int) 0)
0xa64: @ AddItem(Stack[-2], Stack[-3], Stack[-1], Stack[-5])
0xa65: Pop(1)
0xa66: Return(8)

0xa67: PushEmpty(bool, bool)
0xa68: Push((int) 0)
0xa69: @ ClearSubContainer(Stack[-1])
0xa6a: Pop(1)
0xa6b: PushEmpty(int, int)
0xa6c: Stack[-2] = (int) 30
0xa6d: Push((int) 50)
0xa6e: PushEmpty(int)
0xa6f: Call 0x976

0xa70: Pop(0)
0xa71: Push((int) 30)
0xa72: Stack[-2] *= Stack[-1]
0xa73: Stack[-3] = Stack[-2] + Stack[-1] 
0xa74: Call 0xa49

0xa75: Pop(2)
0xa76: Return(2)

0xa77: PushEmpty(bool, int, bool, int)
0xa78: Push((int) 0)
0xa79: @ ClearSubContainer(Stack[-1])
0xa7a: Pop(1)
0xa7b: Push((int) 2)
0xa7c: @ irand(Stack[-2], Stack[-1])
0xa7d: Pop(1)
0xa7e: Push((int) 0)
0xa7f: Pop(1); Push((bool) Stack[-2] == Stack[-1])
0xa80: IF (Stack[-1] == 0) GOTO 0xa89; Pop(1)

0xa81: PushEmpty(int, string)
0xa82: Stack[-1] = "bandage"
0xa83: Call 0xa98

0xa84: Pop(1)
0xa85: Push((int) 0)
0xa86: Push((int) 1)
0xa87: @ AddItem(Stack[-5], Stack[-3], Stack[-2], Stack[-1])
0xa88: Pop(3)
0xa89: Push((int) 2)
0xa8a: @ irand(Stack[-2], Stack[-1])
0xa8b: Pop(1)
0xa8c: Push((int) 0)
0xa8d: Pop(1); Push((bool) Stack[-2] == Stack[-1])
0xa8e: IF (Stack[-1] == 0) GOTO 0xa97; Pop(1)

0xa8f: PushEmpty(int, string)
0xa90: Stack[-1] = "tourniquet"
0xa91: Call 0xa98

0xa92: Pop(1)
0xa93: Push((int) 0)
0xa94: Push((int) 1)
0xa95: @ AddItem(Stack[-5], Stack[-3], Stack[-2], Stack[-1])
0xa96: Pop(3)
0xa97: Return(4)

0xa98: PushEmpty(int, int)
0xa99: @ GetInvItemByName(Stack[-1], Stack[-3])
0xa9a: Pop(0)
0xa9b: Stack[-4] = Stack[-1]
0xa9c: Return(2)

0xa9d: Stack[-1] = (int) 3342
0xa9e: Return(0)

0xa9f: Stack[-1] = "ui/NPC_None.png"
0xaa0: Return(0)

0xaa1: Stack[-1] = (bool) 0
0xaa2: Return(0)

0xaa3: Push(GlobalVars[1])
0xaa4: Stack[-1] = (bool) 0
0xaa5: PopGE 1
0xaa6: PushEmpty()
0xaa7: Call 0xa77

0xaa8: Pop(0)
0xaa9: Return(0)

0xaaa: PushEmpty(bool, bool)
0xaab: Push(GlobalVars[1])
0xaac: IF (Stack[-1] == 0) GOTO 0xab5; Pop(1)

0xaad: @ IsOverrideActive(Stack[-1])
0xaae: Pop(0)
0xaaf: Stack[-1] = !Stack[-1]
0xab0: IF (Stack[-1] == 0) GOTO 0xab3; Pop(1)

0xab1: @ WorkWithCorpse(Stack[-3])
0xab2: Pop(0)
0xab3: Return(2)

0xab4: GOTO 0xacf

0xab5: Push((int) 1000)
0xab6: PushEmpty(int, object)
0xab7: Stack[-1] = Stack[-6]
0xab8: TaskCall 7

0xab9: Call 0x614

0xaba: TaskReturn

0xabb: Pop(1)
0xabc: Pop(2); Push((bool) Stack[-2] == Stack[-1])
0xabd: IF (Stack[-1] == 0) GOTO 0xacf; Pop(1)

0xabe: PushEmpty(bool, object)
0xabf: Stack[-1] = Stack[-5]
0xac0: Call 0x8d9

0xac1: Pop(1)
0xac2: Stack[-1] = !Stack[-1]
0xac3: IF (Stack[-1] == 0) GOTO 0xac5; Pop(1)

0xac4: Return(2)

0xac5: PushEmpty(object)
0xac6: Stack[-1] = Stack[-4]
0xac7: TaskCall 0

0xac8: Call 0x0

0xac9: TaskReturn

0xaca: Pop(1)
0xacb: PushEmpty(object)
0xacc: Stack[-1] = Stack[-4]
0xacd: Call 0x909

0xace: Pop(1)
0xacf: Return(2)

0xad0: Stack[-1] = (bool) 0
0xad1: Return(0)

0xad2: PushEmpty()
0xad3: Stack[-2] = (bool) 1
0xad4: Return(0)

0xad5: PushEmpty(string, bool, string, bool)
0xad6: PushEmpty(bool, object, string)
0xad7: Stack[-2] = Stack[-8]
0xad8: Stack[-1] = "class"
0xad9: Call 0x7bd

0xada: Pop(2)
0xadb: Stack[-1] = !Stack[-1]
0xadc: IF (Stack[-1] == 0) GOTO 0xadf; Pop(1)

0xadd: Stack[-7] = (bool) 0
0xade: Return(4)

0xadf: Push("class")
0xae0: @@ GetProperty(Stack[-1], Stack[-3])
0xae1: Pop(1)
0xae2: Push("rat")
0xae3: Pop(1); Push((bool) Stack[-3] == Stack[-1])
0xae4: IF (Stack[-1] == 0) GOTO 0xae8; Pop(1)

0xae5: Stack[-7] = (bool) 0
0xae6: Return(4)

0xae7: GOTO 0xaed

0xae8: Push("dog")
0xae9: Pop(1); Push((bool) Stack[-3] == Stack[-1])
0xaea: IF (Stack[-1] == 0) GOTO 0xaed; Pop(1)

0xaeb: Stack[-7] = (bool) 0
0xaec: Return(4)

0xaed: @ CanSee(Stack[-1], Stack[-6])
0xaee: Pop(0)
0xaef: PushEmpty(bool)
0xaf0: Stack[-1] = (bool) 1
0xaf1: Push(Stack[-2])
0xaf2: IF (Stack[-1] == 0) GOTO 0xafb; Pop(1)

0xaf3: PushEmpty(float, object)
0xaf4: Stack[-1] = Stack[-9]
0xaf5: Call 0x7b5

0xaf6: Pop(1)
0xaf7: Push((float)250000.0)
0xaf8: Pop(2); Push((bool) Stack[-2] <= Stack[-1])
0xaf9: IF (Stack[-1] == 0) GOTO 0xafb; Pop(1)

0xafa: Stack[-1] = (bool) 0
0xafb: IF (Stack[-1] == 0) GOTO 0xb01; Pop(1)

0xafc: Push((float)-0.3)
0xafd: @ ReportReputationChange(Stack[-7], Stack[-6], Stack[-1])
0xafe: Pop(1)
0xaff: Stack[-7] = (bool) 1
0xb00: Return(4)

0xb01: Stack[-7] = (bool) 0
0xb02: Return(4)

0xb03: PushEmpty()
0xb04: Push(GlobalVars[1])
0xb05: Stack[-1] = (bool) 1
0xb06: PopGE 1
0xb07: Push((int) 50)
0xb08: Push((int) 40)
0xb09: @ SetRTEnvelope(Stack[-2], Stack[-1])
0xb0a: Pop(2)
0xb0b: PushEmpty()
0xb0c: Call 0xa67

0xb0d: Pop(0)
0xb0e: Return(0)

